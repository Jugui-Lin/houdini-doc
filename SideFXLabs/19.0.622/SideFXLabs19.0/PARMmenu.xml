<?xml version="1.0" encoding="UTF-8"?>
<!--

-->
<menuDocument>
  <!-- menuDocument can only contain 1 menu element, whose id is 
         implicitly "root_menu"
      -->
  <menu>
    <scriptItem id="samplescreencolor">
      <label>Sample Screen Colors</label>
      <context>
        <expression>
          <![CDATA[
if len(kwargs["parms"]) == 0:
  return False
parm = kwargs["parms"][0]
return parm.parmTemplate().type() == hou.parmTemplateType.Ramp]]>
        </expression>
      </context>
      <scriptCode>
        <![CDATA[
from labsopui import screensampling

try:
  reload(screensampling)
except NameError:
  from importlib import reload
  reload(screensampling)


screensampling.sample_ramp_color(kwargs["parms"])
]]>
      </scriptCode>
    </scriptItem>
    <scriptItem id="show_in_file_browser">
      <label>Show in File Browser</label>
      <insertAtIndex>20</insertAtIndex>
      <context>
        <expression>
          <![CDATA[
import os
if len(kwargs["parms"]) == 0:
  return False
parm = kwargs["parms"][0]
if parm.parmTemplate().type() == hou.parmTemplateType.String:
  path = hou.text.expandString(parm.evalAsString())
  return os.path.isfile(path) or os.path.isdir(os.path.dirname(path))
return False]]>
        </expression>
      </context>
      <scriptCode>
        <![CDATA[
import os
parm = kwargs["parms"][0]
path = hou.text.expandString(parm.evalAsString())
if os.path.isfile(path):
  hou.ui.showInFileBrowser(path)
elif os.path.isdir(os.path.dirname(path)):
  hou.ui.showInFileBrowser(os.path.dirname(path)+"/")
]]>
      </scriptCode>
    </scriptItem>
    <!-- External Editor -->
    <addScriptItem id="open_external_editor">
      <label>Edit in External Editor</label>
      <parent>expression_menu</parent>
      <!--         <insertAfter>edit_expression</insertAfter>-->
      <context>
        <expression>
          <![CDATA[
try:
  from HoudiniExprEditor import ParmWatcher
  return ParmWatcher.is_valid_parm(kwargs["parms"][0])
except:
  return False]]>
        </expression>
      </context>
      <scriptCode>
        <![CDATA[
from HoudiniExprEditor import ParmWatcher
try:
  reload(ParmWatcher)
except NameError:
  from importlib import reload
  reload(ParmWatcher)
ParmWatcher.add_watcher(kwargs["parms"][0])]]>
      </scriptCode>
    </addScriptItem>
    <!-- Remove watcher -->
    <addScriptItem id="remove_file_watcher">
      <label>Remove File Watcher</label>
      <parent>expression_menu</parent>
      <!--         <insertAfter>open_external_editor</insertAfter>-->
      <context>
        <expression>
          <![CDATA[
try:
  from HoudiniExprEditor import ParmWatcher
  return ParmWatcher.parm_has_watcher(kwargs["parms"][0])
except:
  return False]]>
        </expression>
      </context>
      <scriptCode>
        <![CDATA[
from HoudiniExprEditor import ParmWatcher
try:
  reload(ParmWatcher)
except NameError:
  from importlib import reload
  reload(ParmWatcher)
ParmWatcher.remove_file_watched(kwargs["parms"][0])]]>
      </scriptCode>
    </addScriptItem>
    <subMenu id="expression_menu">
      <label>Expression</label>
      <scriptItem id="set_wedgeindex">
        <label>Set to Wedge Index</label>
        <insertAfter>use_old_language</insertAfter>
        <context>
          <expression>
if len(kwargs["parms"]) == 0:
  return False

  import hou
from labsopui import wedge_tools

return wedge_tools.canSetWedgeIndex(kwargs[&quot;parms&quot;][0])
                </expression>
        </context>
        <scriptCode>
          <![CDATA[
import hou
from labsopui import wedge_tools

wedge_tools.setWedgeIndex(kwargs["parms"])

]]>
        </scriptCode>
      </scriptItem>
      <scriptItem id="wedge_value">
        <label>Wedge Value...</label>
        <insertAfter>set_wedgeindex</insertAfter>
        <context>
          <expression>
if len(kwargs["parms"]) == 0:
  return False

import hou
from labsopui import wedge_tools

return wedge_tools.canWedgeValue(kwargs[&quot;parms&quot;][0])
                </expression>
        </context>
        <scriptCode>
          <![CDATA[
import hou
from labsopui import wedge_tools

wedge_tools.wedge(kwargs["parms"])

]]>
        </scriptCode>
      </scriptItem>
      <scriptItem id="ftrimify">
        <label>Trim Excess Fractional Digits</label>
        <insertAfter>wedge_value</insertAfter>
        <context>
          <expression>
if len(kwargs["parms"]) == 0:
  return False

return isinstance(kwargs["parms"][0].parmTemplate(), hou.StringParmTemplate)
          </expression>
        </context>
        <scriptCode><![CDATA[
from labsopui import ftrimify
ftrimify.ftrimify(kwargs["parms"][0])
]]></scriptCode>
        </scriptItem>
    </subMenu>
  </menu>
</menuDocument>