// Magic: bd892bce
// Automatically generated PSI dialog (PSI version 19.0.561)
// Sat Apr  9 14:36:35 2022


f_tmp = FLOAT_FIELD;	// dialog.top.ui
keeppos.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

keeppos.gad = ROW
{
    
    { WIDTH(0.18) }

    PARM_BUTTON("keeppos", "Keep Position When Parenting") toggle VALUE(keeppos.val);

    {  }

    {  }
}

pre_xform.gad = ROW
{
    {  }

    {  }
    { WIDTH(0.099) }

    pre_xform.menu;
}
}	// Template join.bot

xOrd.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

xOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Transform Order", "xOrd") WIDTH(1.5);
    { WIDTH(0.09) }

    xOrd.menu;

    {  }

    {  }
}

rOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    rOrd.menu;

    {  }

    { WIDTH(0.1) }
}
}	// Template join.bot


t.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   t.label = PARM_LABEL("Translate", "t") WIDTH(1.5);
   PARM(float, 3, "t", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(t.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_transform" VALUE(t.script_action)
	HELP("Select an object to match the translation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    { WIDTH(0.1) }
}

r.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   r.label = PARM_LABEL("Rotate", "r") WIDTH(1.5);
   PARM(float, 3, "r", none, none, "X,Y,Z")
	RANGE(0,360)  LABELREF(r.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_rotation" VALUE(r.script_action)
	HELP("Select an object to match the rotation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    { WIDTH(0.1) }
}
tdisplay.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tdisplay.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

{ WIDTH(0.18) }
tdisplay.gad = PARM_BUTTON("tdisplay", "") toggle VALUE(tdisplay.val) RETAIN_SIZE_WHEN_HIDDEN;

display.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 display.label = PARM_LABEL("Display", "display") WIDTH(1.32);
 PARM(integer, 1, "display", none, none) RANGE(0,1)
	LOCK_RANGE LABELREF(display.label) HSTRETCH;

  { WIDTH(0.1) }
}
}	
}	// Template join.bot


l_iconscale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 l_iconscale.label = PARM_LABEL("Icon Scale", "l_iconscale") WIDTH(1.5);
 PARM(float, 1, "l_iconscale", none, none) RANGE(0,10)
	 LABELREF(l_iconscale.label) HSTRETCH;

  { WIDTH(0.1) }
}

caching.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("caching", "Cache Object Transform") toggle VALUE(caching.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

picking.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("picking", "Viewport Selecting Enabled") toggle VALUE(picking.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

pickscript.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 { WIDTH(0.18) }

 pickscript.label = PARM_LABEL("Select Script", "pickscript") WIDTH(1.5);

 PARM_FIELD (pathstring, "pickscript") LABELREF(pickscript.label)
	VALUE(pickscript.val) HSTRETCH;

    pickscript.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(pickscript.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

lookatpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)
 { WIDTH(0.18) }

 lookatpath.label = PARM_LABEL("Look At", "lookatpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "lookatpath") VALUE(lookatpath.val) 
	LABELREF(lookatpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(lookatpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(lookatpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

 { WIDTH(0.1) }
}

lookup.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Look At Up Vector", "lookup") WIDTH(1.5);
    { WIDTH(0.09) }

    lookup.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}
pathobjpath.gad = NULL { }
roll.gad = NULL { }
pos.gad = NULL { }
uparmtype.gad = NULL { }
pathorient.gad = NULL { }
up.gad = NULL { }
bank.gad = NULL { }

light_enabled.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("light_enabled", "On") toggle VALUE(light_enabled.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}
on.gad = NULL { }

ogl_enablelight.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ogl_enablelight", "Enabled In Viewports") toggle VALUE(ogl_enablelight.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

light_intensity.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 light_intensity.label = PARM_LABEL("Intensity", "light_intensity") WIDTH(1.5);
 PARM(float, 1, "light_intensity", none, none) RANGE(0,100)
	 LABELREF(light_intensity.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_exposure.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_exposure.label = PARM_LABEL("Exposure (EV)", "RSL_exposure") WIDTH(1.5);
 PARM(float, 1, "RSL_exposure", none, none) RANGE(-8,8)
	 LABELREF(RSL_exposure.label) HSTRETCH;

  { WIDTH(0.1) }
}

light_color.gad = 
{
    LAYOUT (horizontal) HSTRETCH
    { WIDTH(0.18) }

    light_color.label = PARM_LABEL("Color", "light_color") WIDTH(1.5);
    PARM(float, 3, "light_color", none, COLOR, "R,G,B") 
	LABELREF(light_color.label) HSTRETCH;

    { WIDTH(0.1) }
}

env_map.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 { WIDTH(0.18) }

 env_map.label = PARM_LABEL("Texture", "env_map") WIDTH(1.5);

 PARM_FIELD (pathstring, "env_map") LABELREF(env_map.label)
	VALUE(env_map.val) HSTRETCH;

    env_map.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(env_map.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

envType.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Texture Type", "envType") WIDTH(1.5);
    { WIDTH(0.09) }

    envType.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

tex0_colorSpace.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Color Space", "tex0_colorSpace") WIDTH(1.5);
    { WIDTH(0.09) }

    tex0_colorSpace.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

RSL_flipHorizontal.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_flipHorizontal", "Flip Horizontal") toggle VALUE(RSL_flipHorizontal.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

sepparm2.gad = 

{
    LAYOUT(vertical) HSTRETCH HMARGIN(0.18, 0.1)
    NO_MARGIN_SPACING_SCALE

    { HEIGHT(0.1) }
    SEPARATOR;
    { HEIGHT(0.1) }
}

RSL_hue.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_hue.label = PARM_LABEL("Hue", "RSL_hue") WIDTH(1.5);
 PARM(float, 1, "RSL_hue", none, none) RANGE(0,360)
	 LABELREF(RSL_hue.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_saturation.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_saturation.label = PARM_LABEL("Saturation", "RSL_saturation") WIDTH(1.5);
 PARM(float, 1, "RSL_saturation", none, none) RANGE(0,100)
	 LABELREF(RSL_saturation.label) HSTRETCH;

  { WIDTH(0.1) }
}

tex0_gamma.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 tex0_gamma.label = PARM_LABEL("Gamma", "tex0_gamma") WIDTH(1.5);
 PARM(float, 1, "tex0_gamma", none, none) RANGE(0,16)
	 LABELREF(tex0_gamma.label) HSTRETCH;

  { WIDTH(0.1) }
}

background_enable.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("background_enable", "Background") toggle VALUE(background_enable.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

alphaReplaceEnable.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("alphaReplaceEnable", "Replace Alpha Channel") toggle VALUE(alphaReplaceEnable.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

alphaReplaceValue.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 alphaReplaceValue.label = PARM_LABEL("Alpha", "alphaReplaceValue") WIDTH(1.5);
 PARM(float, 1, "alphaReplaceValue", none, none) RANGE(0,1)
	 LABELREF(alphaReplaceValue.label) HSTRETCH;

  { WIDTH(0.1) }
}

backPlateEnabled.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("backPlateEnabled", "Enabled") toggle VALUE(backPlateEnabled.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

tex1.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 { WIDTH(0.18) }

 tex1.label = PARM_LABEL("Map", "tex1") WIDTH(1.5);

 PARM_FIELD (pathstring, "tex1") LABELREF(tex1.label)
	VALUE(tex1.val) HSTRETCH;

    tex1.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(tex1.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

tex1_colorSpace.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Color Space", "tex1_colorSpace") WIDTH(1.5);
    { WIDTH(0.09) }

    tex1_colorSpace.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

tex1_gamma.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 tex1_gamma.label = PARM_LABEL("Gamma", "tex1_gamma") WIDTH(1.5);
 PARM(float, 1, "tex1_gamma", none, none) RANGE(0,16)
	 LABELREF(tex1_gamma.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_exposure2.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_exposure2.label = PARM_LABEL("Exposure", "RSL_exposure2") WIDTH(1.5);
 PARM(float, 1, "RSL_exposure2", none, none) RANGE(0,2)
	 LABELREF(RSL_exposure2.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_hue2.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_hue2.label = PARM_LABEL("Hue", "RSL_hue2") WIDTH(1.5);
 PARM(float, 1, "RSL_hue2", none, none) RANGE(0,360)
	 LABELREF(RSL_hue2.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_saturation2.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_saturation2.label = PARM_LABEL("Saturation", "RSL_saturation2") WIDTH(1.5);
 PARM(float, 1, "RSL_saturation2", none, none) RANGE(0,100)
	 LABELREF(RSL_saturation2.label) HSTRETCH;

  { WIDTH(0.1) }
}

backPlateAspect.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Aspect Ratio", "backPlateAspect") WIDTH(1.5);
    { WIDTH(0.09) }

    backPlateAspect.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

applyExposureCompensation.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("applyExposureCompensation", "Camera Exposure Compensation") toggle VALUE(applyExposureCompensation.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

RSL_lightGroup.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    RSL_lightGroup.label = PARM_LABEL("AOV Light Group", "RSL_lightGroup") WIDTH(1.5);
    PARM_FIELD(string, "RSL_lightGroup") VALUE(RSL_lightGroup.val) 
	LABELREF(RSL_lightGroup.label) HSTRETCH;

    { WIDTH(0.1) }
}

shadow.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("shadow", "Enable") toggle VALUE(shadow.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

shadowTransparency.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 shadowTransparency.label = PARM_LABEL("Transparency", "shadowTransparency") WIDTH(1.5);
 PARM(float, 1, "shadowTransparency", none, none) RANGE(0,1)
	 LABELREF(shadowTransparency.label) HSTRETCH;

  { WIDTH(0.1) }
}
RSL_affectDiffuse.gad = NULL { }
RSL_affectSpecular.gad = NULL { }
RSL_matteShadow.gad = NULL { }

RSL_affectedByRefraction.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Affected by Refraction", "RSL_affectedByRefraction") WIDTH(1.5);
    { WIDTH(0.09) }

    RSL_affectedByRefraction.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

RSL_indirectMaxTraceDepth.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_indirectMaxTraceDepth.label = PARM_LABEL("GI Max Trace Depth", "RSL_indirectMaxTraceDepth") WIDTH(1.5);
 PARM(integer, 1, "RSL_indirectMaxTraceDepth", none, none) RANGE(0,255)
	LOCK_RANGE LABELREF(RSL_indirectMaxTraceDepth.label) HSTRETCH;

  { WIDTH(0.1) }
}

sepparm3.gad = 

{
    LAYOUT(vertical) HSTRETCH HMARGIN(0.18, 0.1)
    NO_MARGIN_SPACING_SCALE

    { HEIGHT(0.1) }
    SEPARATOR;
    { HEIGHT(0.1) }
}

RSL_samples.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_samples.label = PARM_LABEL("Light Samples", "RSL_samples") WIDTH(1.5);
 PARM(integer, 1, "RSL_samples", none, none) RANGE(1,512)
	 LABELREF(RSL_samples.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_volumeSamples.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_volumeSamples.label = PARM_LABEL("Volume Samples", "RSL_volumeSamples") WIDTH(1.5);
 PARM(integer, 1, "RSL_volumeSamples", none, none) RANGE(1,512)
	 LABELREF(RSL_volumeSamples.label) HSTRETCH;

  { WIDTH(0.1) }
}

sepparm.gad = 

{
    LAYOUT(vertical) HSTRETCH HMARGIN(0.18, 0.1)
    NO_MARGIN_SPACING_SCALE

    { HEIGHT(0.1) }
    SEPARATOR;
    { HEIGHT(0.1) }
}

RSL_diffuseScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_diffuseScale.label = PARM_LABEL("Diffuse", "RSL_diffuseScale") WIDTH(1.5);
 PARM(float, 1, "RSL_diffuseScale", none, none) RANGE(0,1)
	 LABELREF(RSL_diffuseScale.label) HSTRETCH;

  { WIDTH(0.1) }
}
RSL_specularScale.gad = NULL { }

RSL_reflectionScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_reflectionScale.label = PARM_LABEL("Reflection", "RSL_reflectionScale") WIDTH(1.5);
 PARM(float, 1, "RSL_reflectionScale", none, none) RANGE(0,1)
	 LABELREF(RSL_reflectionScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_transmissionScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_transmissionScale.label = PARM_LABEL("Transmission", "RSL_transmissionScale") WIDTH(1.5);
 PARM(float, 1, "RSL_transmissionScale", none, none) RANGE(0,1)
	 LABELREF(RSL_transmissionScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_sssScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_sssScale.label = PARM_LABEL("Single Scattering", "RSL_sssScale") WIDTH(1.5);
 PARM(float, 1, "RSL_sssScale", none, none) RANGE(0,1)
	 LABELREF(RSL_sssScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_multisssScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_multisssScale.label = PARM_LABEL("Multiple Scattering", "RSL_multisssScale") WIDTH(1.5);
 PARM(float, 1, "RSL_multisssScale", none, none) RANGE(0,1)
	 LABELREF(RSL_multisssScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_indirectScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_indirectScale.label = PARM_LABEL("Global Illumination", "RSL_indirectScale") WIDTH(1.5);
 PARM(float, 1, "RSL_indirectScale", none, none) RANGE(0,1)
	 LABELREF(RSL_indirectScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_volumeScale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_volumeScale.label = PARM_LABEL("Volume", "RSL_volumeScale") WIDTH(1.5);
 PARM(float, 1, "RSL_volumeScale", none, none) RANGE(0,1)
	 LABELREF(RSL_volumeScale.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_emitCausticPhotons.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_emitCausticPhotons", "Caustic Photons") toggle VALUE(RSL_emitCausticPhotons.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

RSL_causticIntensity.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_causticIntensity.label = PARM_LABEL("Intensity", "RSL_causticIntensity") WIDTH(1.5);
 PARM(float, 1, "RSL_causticIntensity", none, none) RANGE(0,2)
	 LABELREF(RSL_causticIntensity.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_causticPhotons.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_causticPhotons.label = PARM_LABEL("Photons", "RSL_causticPhotons") WIDTH(1.5);
 PARM(integer, 1, "RSL_causticPhotons", none, LOGSCALE) RANGE(10000,1000000)
	 LABELREF(RSL_causticPhotons.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_setInclusive.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_setInclusive", "Enable Light-Mesh Associations") toggle VALUE(RSL_setInclusive.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

RSL_lightLinking.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_lightLinking.label = PARM_LABEL("Light Enabled For", "RSL_lightLinking") WIDTH(1.5);
 PARM_FIELD (pathstring, "RSL_lightLinking") LABELREF(RSL_lightLinking.label) 
	VALUE(RSL_lightLinking.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(RSL_lightLinking.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

RSL_shadowLinking.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_shadowLinking.label = PARM_LABEL("Shadows Enabled For", "RSL_shadowLinking") WIDTH(1.5);
 PARM_FIELD (pathstring, "RSL_shadowLinking") LABELREF(RSL_shadowLinking.label) 
	VALUE(RSL_shadowLinking.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(RSL_shadowLinking.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

RSL_emitGIPhotons.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("RSL_emitGIPhotons", "Emit GI Photons") toggle VALUE(RSL_emitGIPhotons.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

RSL_giIntensity.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_giIntensity.label = PARM_LABEL("Intensity Multiplier", "RSL_giIntensity") WIDTH(1.5);
 PARM(float, 1, "RSL_giIntensity", none, none) RANGE(0,2)
	 LABELREF(RSL_giIntensity.label) HSTRETCH;

  { WIDTH(0.1) }
}

RSL_giPhotons.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 RSL_giPhotons.label = PARM_LABEL("Number of Photons", "RSL_giPhotons") WIDTH(1.5);
 PARM(integer, 1, "RSL_giPhotons", none, LOGSCALE) RANGE(10000,1000000)
	 LABELREF(RSL_giPhotons.label) HSTRETCH;

  { WIDTH(0.1) }
}
light_enable.gad = NULL { }
use_dcolor.gad = NULL { }
dcolor.gad = NULL { }
s.gad = NULL { }
p.gad = NULL { }
scale.gad = NULL { }
dimmer.gad = NULL { }
shadow_type.gad = NULL { }
gamma0.gad = NULL { }
tex0_gammaoverride.gad = NULL { }
tex0_srgb.gad = NULL { }
gamma1.gad = NULL { }
tex1_gammaoverride.gad = NULL { }
tex1_srgb.gad = NULL { }
childcomp.gad = NULL { }
lookupobjpath.gad = NULL { }
constraints_on.gad = NULL { }
constraints_path.gad = NULL { }
pr.gad = NULL { }

Gamma_Override_3.gad = 

GROUP simple "Gamma Override" flat 
{ 
    VALUE(Gamma_Override_3.gad.val) LAYOUT(vertical) HSTRETCH 
} 

Gamma_Override_0.gad = 

GROUP simple "Gamma Override" flat 
{ 
    VALUE(Gamma_Override_0.gad.val) LAYOUT(vertical) HSTRETCH 
} 

folder8.gad = 

GROUP simple "Global Illumination" flat 
{ 
    VALUE(folder8.gad.val) LAYOUT(vertical) HSTRETCH 
	    RSL_emitGIPhotons.gad;		
	    RSL_giIntensity.gad;		
	    RSL_giPhotons.gad;		
} 

folder7.gad = 
GROUP collapsible "Caustics" flat  
{
    VALUE(folder7.gad.val) LAYOUT(vertical) HSTRETCH
	    RSL_emitCausticPhotons.gad;		
	    RSL_causticIntensity.gad;		
	    RSL_causticPhotons.gad;		
} 

folder5.gad = 

GROUP simple "Volume" flat 
{ 
    VALUE(folder5.gad.val) LAYOUT(vertical) HSTRETCH 
} 

folder2.gad = 
GROUP collapsible "Contribution" flat  
{
    VALUE(folder2.gad.val) LAYOUT(vertical) HSTRETCH
	    RSL_affectDiffuse.gad;		
	    RSL_affectSpecular.gad;		
	    RSL_matteShadow.gad;		
	    RSL_affectedByRefraction.gad;		
	    RSL_indirectMaxTraceDepth.gad;		
	    sepparm3.gad;		
	    RSL_samples.gad;		
	    RSL_volumeSamples.gad;		
	    sepparm.gad;		
	    RSL_diffuseScale.gad;		
	    RSL_specularScale.gad;		
	    RSL_reflectionScale.gad;		
	    RSL_transmissionScale.gad;		
	    RSL_sssScale.gad;		
	    RSL_multisssScale.gad;		
	    RSL_indirectScale.gad;		
	    RSL_volumeScale.gad;		
} 

Shadow_1.gad = 
GROUP collapsible "Shadow" flat  
{
    VALUE(Shadow_1.gad.val) LAYOUT(vertical) HSTRETCH
	    shadow.gad;		
	    shadowTransparency.gad;		
} 

folder1.gad = 
GROUP collapsible "Light Group" flat  
{
    VALUE(folder1.gad.val) LAYOUT(vertical) HSTRETCH
	    RSL_lightGroup.gad;		
} 

RS_shaderNodeMainSwitcher_1.gad = 
GROUP collapsible "Back-Plate" flat  
{
    VALUE(RS_shaderNodeMainSwitcher_1.gad.val) LAYOUT(vertical) HSTRETCH
	    backPlateEnabled.gad;		
	    tex1.gad;		
	    tex1_colorSpace.gad;		
	    tex1_gamma.gad;		
	    RSL_exposure2.gad;		
	    RSL_hue2.gad;		
	    RSL_saturation2.gad;		
	    backPlateAspect.gad;		
	    applyExposureCompensation.gad;		
} 

Environment_Alpha_Channel_Replace_2.gad = 
GROUP collapsible "Environment" flat  
{
    VALUE(Environment_Alpha_Channel_Replace_2.gad.val) LAYOUT(vertical) HSTRETCH
	    background_enable.gad;		
	    alphaReplaceEnable.gad;		
	    alphaReplaceValue.gad;		
} 

RS_shaderNodeMainSwitcher.gad = 

GROUP simple "General" flat 
{ 
    VALUE(RS_shaderNodeMainSwitcher.gad.val) LAYOUT(vertical) HSTRETCH 
	    light_intensity.gad;		
	    RSL_exposure.gad;		
	    light_color.gad;		
	    env_map.gad;		
	    envType.gad;		
	    tex0_colorSpace.gad;		
	    RSL_flipHorizontal.gad;		
	    sepparm2.gad;		
	    RSL_hue.gad;		
	    RSL_saturation.gad;		
	    tex0_gamma.gad;		
} 

folder3.gad = 

GROUP simple "Light" flat 
{ 
    VALUE(folder3.gad.val) LAYOUT(vertical) HSTRETCH 
	    light_enabled.gad;		
	    on.gad;		
	    ogl_enablelight.gad;		
} 

folder1_2.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 flat "folder1_2.gad"
    { 
	VALUE(folder1_2.gad.val) STRETCH(1,0)

	TAB "Viewing Options"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    tdisplay.row.join;		
	    l_iconscale.gad;		
	    caching.gad;		
	    picking.gad;		
	    pickscript.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Lookat Options"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    lookatpath.gad;		
	    lookup.gad;		

	    { STRETCH(1,1) }
	}
    } 
}

folder0.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 flat "folder0.gad"
    { 
	VALUE(folder0.gad.val) STRETCH(1,0)

	TAB "Transform"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    keeppos.row.join;		
	    xOrd.row.join;		
	    t.gad;		
	    r.gad;		
	    folder1_2.gad;		
	    pathobjpath.gad;		
	    roll.gad;		
	    pos.gad;		
	    uparmtype.gad;		
	    pathorient.gad;		
	    up.gad;		
	    bank.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Light"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    folder3.gad;		
	    RS_shaderNodeMainSwitcher.gad;		
	    Environment_Alpha_Channel_Replace_2.gad;		
	    RS_shaderNodeMainSwitcher_1.gad;		
	    folder1.gad;		
	    Shadow_1.gad;		
	    folder2.gad;		
	    folder7.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Objects"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    RSL_setInclusive.gad;		
	    RSL_lightLinking.gad;		
	    RSL_shadowLinking.gad;		

	    { STRETCH(1,1) }
	}
    } 
}

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH 
    folder0.gad; 
    childcomp.gad; 
    lookupobjpath.gad; 
    constraints_on.gad; 
    constraints_path.gad; 
    pr.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val_) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
