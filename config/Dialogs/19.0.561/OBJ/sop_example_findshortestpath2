// Magic: 15bffebd
// Automatically generated PSI dialog (PSI version 19.0.561)
// Wed Apr 20 03:49:42 2022


f_tmp = FLOAT_FIELD;	// dialog.top.ui
keeppos.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

keeppos.gad = ROW
{
    
    { WIDTH(0.18) }

    PARM_BUTTON("keeppos", "Keep Position When Parenting") toggle VALUE(keeppos.val);

    {  }

    {  }
}

pre_xform.gad = ROW
{
    {  }

    {  }
    { WIDTH(0.099) }

    pre_xform.menu;
}
}	// Template join.bot

xOrd.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

xOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Transform Order", "xOrd") WIDTH(1.5);
    { WIDTH(0.09) }

    xOrd.menu;

    {  }

    {  }
}

rOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    rOrd.menu;

    {  }

    { WIDTH(0.1) }
}
}	// Template join.bot


t.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   t.label = PARM_LABEL("Translate", "t") WIDTH(1.5);
   PARM(float, 3, "t", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(t.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_transform" VALUE(t.script_action)
	HELP("Select an object to match the translation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    { WIDTH(0.1) }
}

r.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   r.label = PARM_LABEL("Rotate", "r") WIDTH(1.5);
   PARM(float, 3, "r", none, none, "X,Y,Z")
	RANGE(0,360)  LABELREF(r.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_rotation" VALUE(r.script_action)
	HELP("Select an object to match the rotation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    { WIDTH(0.1) }
}

s.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   s.label = PARM_LABEL("Scale", "s") WIDTH(1.5);
   PARM(float, 3, "s", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(s.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_scale" VALUE(s.script_action)
	HELP("Select an object to match the scale with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    { WIDTH(0.1) }
}

p.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   p.label = PARM_LABEL("Pivot Translate", "p") WIDTH(1.5);
   PARM(float, 3, "p", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(p.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_pivot" VALUE(p.script_action)
	HELP("Select an object to match the pivot with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    { WIDTH(0.1) }
}

scale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 scale.label = PARM_LABEL("Uniform Scale", "scale") WIDTH(1.5);
 PARM(float, 1, "scale", none, none) RANGE(0,1)
	 LABELREF(scale.label) HSTRETCH;

  { WIDTH(0.1) }
}

lookatpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)
 { WIDTH(0.18) }

 lookatpath.label = PARM_LABEL("Look At", "lookatpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "lookatpath") VALUE(lookatpath.val) 
	LABELREF(lookatpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(lookatpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(lookatpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

 { WIDTH(0.1) }
}

lookup.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Look At Up Vector", "lookup") WIDTH(1.5);
    { WIDTH(0.09) }

    lookup.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

pathobjpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)
 { WIDTH(0.18) }

 pathobjpath.label = PARM_LABEL("Path Object", "pathobjpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "pathobjpath") VALUE(pathobjpath.val) 
	LABELREF(pathobjpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(pathobjpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(pathobjpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

 { WIDTH(0.1) }
}

roll.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   roll.label = PARM_LABEL( "Roll", "roll" ) WIDTH(1.5);
   PARM(float, 1, "roll", none, none) RANGE(-360, 360)
	LABELREF( roll.label ) HSTRETCH;

   { WIDTH(0.1) }
}

pos.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 pos.label = PARM_LABEL("Position", "pos") WIDTH(1.5);
 PARM(float, 1, "pos", none, none) RANGE(0,10)
	LOCK_RANGE_MIN LABELREF(pos.label) HSTRETCH;

  { WIDTH(0.1) }
}

uparmtype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Parameterization", "uparmtype") WIDTH(1.5);
    { WIDTH(0.09) }

    uparmtype.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

pathorient.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 pathorient.label = PARM_LABEL("Orient Along Path", "pathorient") WIDTH(1.5);
 PARM(integer, 1, "pathorient", none, none) RANGE(0,1)
	 LABELREF(pathorient.label) HSTRETCH;

  { WIDTH(0.1) }
}

up.gad = ROW 
{
    HSTRETCH
   { WIDTH(0.18) }

    up.label = PARM_LABEL("Orient Up Vector", "up") WIDTH(1.5);
    PARM(float, 3, "up", none, none) LABELREF(up.label)
	HSTRETCH;

   { WIDTH(0.1) }
}

bank.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 bank.label = PARM_LABEL("Auto-Bank factor", "bank") WIDTH(1.5);
 PARM(float, 1, "bank", none, none) RANGE(-1,1)
	 LABELREF(bank.label) HSTRETCH;

  { WIDTH(0.1) }
}
shop_materialpath.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

shop_materialpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)
 { WIDTH(0.18) }

 shop_materialpath.label = PARM_LABEL("Material", "shop_materialpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "shop_materialpath") VALUE(shop_materialpath.val) 
	LABELREF(shop_materialpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(shop_materialpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(shop_materialpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

 {  }
}

shop_materialopts.gad = ROW
{
    {  }

    {  }
    { WIDTH(0.099) }

    shop_materialopts.menu;
}
}	// Template join.bot

tdisplay.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tdisplay.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

{ WIDTH(0.18) }
tdisplay.gad = PARM_BUTTON("tdisplay", "") toggle VALUE(tdisplay.val) RETAIN_SIZE_WHEN_HIDDEN;

display.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 display.label = PARM_LABEL("Display", "display") WIDTH(1.32);
 PARM(integer, 1, "display", none, none) RANGE(0,1)
	LOCK_RANGE LABELREF(display.label) HSTRETCH;

  { WIDTH(0.1) }
}
}	
}	// Template join.bot


vm_phantom.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_phantom", "Phantom") toggle VALUE(vm_phantom.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_renderable.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_renderable", "Renderable") toggle VALUE(vm_renderable.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

viewportlod.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Display As", "viewportlod") WIDTH(1.5);
    { WIDTH(0.09) }

    viewportlod.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

categories.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    categories.label = PARM_LABEL("Categories", "categories") WIDTH(1.5);
    PARM_FIELD(string, "categories") VALUE(categories.val) 
	LABELREF(categories.label) HSTRETCH;

    { WIDTH(0.1) }
}

reflectmask.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 reflectmask.label = PARM_LABEL("Reflection Mask", "reflectmask") WIDTH(1.5);
 PARM_FIELD (pathstring, "reflectmask") LABELREF(reflectmask.label) 
	VALUE(reflectmask.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(reflectmask.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

refractmask.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 refractmask.label = PARM_LABEL("Refraction Mask", "refractmask") WIDTH(1.5);
 PARM_FIELD (pathstring, "refractmask") LABELREF(refractmask.label) 
	VALUE(refractmask.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(refractmask.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

lightmask.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 lightmask.label = PARM_LABEL("Light Mask", "lightmask") WIDTH(1.5);
 PARM_FIELD (pathstring, "lightmask") LABELREF(lightmask.label) 
	VALUE(lightmask.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(lightmask.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

vm_volumefilter.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Volume Filter", "vm_volumefilter") WIDTH(1.5);
    { WIDTH(0.09) }

    vm_volumefilter.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_volumefilterwidth.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 vm_volumefilterwidth.label = PARM_LABEL("Volume Filter Width", "vm_volumefilterwidth") WIDTH(1.5);
 PARM(float, 1, "vm_volumefilterwidth", none, none) RANGE(0.001,5)
	 LABELREF(vm_volumefilterwidth.label) HSTRETCH;

  { WIDTH(0.1) }
}

vm_matte.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_matte", "Matte shading") toggle VALUE(vm_matte.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_rayshade.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_rayshade", "Raytrace Shading") toggle VALUE(vm_rayshade.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

geo_velocityblur.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("geo_velocityblur", "Geometry Velocity Blur") toggle VALUE(geo_velocityblur.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_shadingquality.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 vm_shadingquality.label = PARM_LABEL("Shading Quality", "vm_shadingquality") WIDTH(1.5);
 PARM(float, 1, "vm_shadingquality", none, none) RANGE(0,10)
	 LABELREF(vm_shadingquality.label) HSTRETCH;

  { WIDTH(0.1) }
}

vm_flatness.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 vm_flatness.label = PARM_LABEL("Dicing Flatness", "vm_flatness") WIDTH(1.5);
 PARM(float, 1, "vm_flatness", none, none) RANGE(0,1)
	 LABELREF(vm_flatness.label) HSTRETCH;

  { WIDTH(0.1) }
}

vm_raypredice.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Ray Predicing", "vm_raypredice") WIDTH(1.5);
    { WIDTH(0.09) }

    vm_raypredice.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_curvesurface.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_curvesurface", "Shade Curves As Surfaces") toggle VALUE(vm_curvesurface.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_rmbackface.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_rmbackface", "Backface Removal") toggle VALUE(vm_rmbackface.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

shop_geometrypath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)
 { WIDTH(0.18) }

 shop_geometrypath.label = PARM_LABEL("Procedural Shader", "shop_geometrypath") WIDTH(1.5);
 PARM_FIELD(pathstring, "shop_geometrypath") VALUE(shop_geometrypath.val) 
	LABELREF(shop_geometrypath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(shop_geometrypath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(shop_geometrypath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

 { WIDTH(0.1) }
}

vm_forcegeometry.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_forcegeometry", "Force Procedural Geometry Output") toggle VALUE(vm_forcegeometry.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_rendersubd.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_rendersubd", "Polygons As Subdivision (Mantra)") toggle VALUE(vm_rendersubd.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_subdgroup.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    vm_subdgroup.label = PARM_LABEL("Subdivision Group", "vm_subdgroup") WIDTH(1.5);
    PARM_FIELD(string, "vm_subdgroup") VALUE(vm_subdgroup.val) 
	LABELREF(vm_subdgroup.label) HSTRETCH;

    { WIDTH(0.1) }
}

vm_renderpoints.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Render As Points (Mantra)", "vm_renderpoints") WIDTH(1.5);
    { WIDTH(0.09) }

    vm_renderpoints.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_usenforpoints.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_usenforpoints", "Use N For Point Rendering") toggle VALUE(vm_usenforpoints.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_pointscale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 vm_pointscale.label = PARM_LABEL("Point Scale", "vm_pointscale") WIDTH(1.5);
 PARM(float, 1, "vm_pointscale", none, none) RANGE(0,10)
	LOCK_RANGE_MIN LABELREF(vm_pointscale.label) HSTRETCH;

  { WIDTH(0.1) }
}

vm_metavolume.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_metavolume", "Metaballs as Volume") toggle VALUE(vm_metavolume.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_coving.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Coving", "vm_coving") WIDTH(1.5);
    { WIDTH(0.09) }

    vm_coving.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_materialoverride.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    PARM_LABEL_SIMPLE("Material Override", "vm_materialoverride") WIDTH(1.5);
    { WIDTH(0.09) }

    vm_materialoverride.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_computeN.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_computeN", "Automatically Compute Normals") toggle VALUE(vm_computeN.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

vm_overridedetail.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vm_overridedetail", "Ignore Geometry Attribute Shaders") toggle VALUE(vm_overridedetail.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

use_dcolor.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("use_dcolor", "Set Wireframe Color") toggle VALUE(use_dcolor.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

dcolor.gad = 
{
    LAYOUT (horizontal) HSTRETCH
    { WIDTH(0.18) }

    dcolor.label = PARM_LABEL("Wireframe Color", "dcolor") WIDTH(1.5);
    PARM(float, 3, "dcolor", none, COLOR, "R,G,B") 
	LABELREF(dcolor.label) HSTRETCH;

    { WIDTH(0.1) }
}

picking.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("picking", "Viewport Selecting Enabled") toggle VALUE(picking.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

pickscript.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 { WIDTH(0.18) }

 pickscript.label = PARM_LABEL("Select Script", "pickscript") WIDTH(1.5);

 PARM_FIELD (pathstring, "pickscript") LABELREF(pickscript.label)
	VALUE(pickscript.val) HSTRETCH;

    pickscript.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(pickscript.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

caching.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("caching", "Cache Object Transform") toggle VALUE(caching.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

vport_shadeopen.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vport_shadeopen", "Shade Open Curves In Viewport") toggle VALUE(vport_shadeopen.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}
vport_displayassubdiv.gad = NULL { }

renderable.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("renderable", "Renderable") toggle VALUE(renderable.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}
pr.gad = NULL { }
childcomp.gad = NULL { }
constraints_on.gad = NULL { }
constraints_path.gad = NULL { }
lookupobjpath.gad = NULL { }
vport_onionskin.gad = NULL { }

folder0.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 flat "folder0.gad"
    { 
	VALUE(folder0.gad.val) STRETCH(1,0)

	TAB "Shading"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    categories.gad;		
	    reflectmask.gad;		
	    refractmask.gad;		
	    lightmask.gad;		
	    vm_volumefilter.gad;		
	    vm_volumefilterwidth.gad;		
	    vm_matte.gad;		
	    vm_rayshade.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Sampling"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    geo_velocityblur.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Dicing"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    vm_shadingquality.gad;		
	    vm_flatness.gad;		
	    vm_raypredice.gad;		
	    vm_curvesurface.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Geometry"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    vm_rmbackface.gad;		
	    shop_geometrypath.gad;		
	    vm_forcegeometry.gad;		
	    vm_rendersubd.gad;		
	    vm_subdgroup.gad;		
	    vm_renderpoints.gad;		
	    vm_usenforpoints.gad;		
	    vm_pointscale.gad;		
	    vm_metavolume.gad;		
	    vm_coving.gad;		
	    vm_materialoverride.gad;		
	    vm_computeN.gad;		
	    vm_overridedetail.gad;		

	    { STRETCH(1,1) }
	}
    } 
}

stdswitcher5.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 flat "stdswitcher5.gad"
    { 
	VALUE(stdswitcher5.gad.val) STRETCH(1,0)

	TAB "Transform"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    keeppos.row.join;		
	    xOrd.row.join;		
	    t.gad;		
	    r.gad;		
	    s.gad;		
	    p.gad;		
	    scale.gad;		
	    lookatpath.gad;		
	    lookup.gad;		
	    pathobjpath.gad;		
	    roll.gad;		
	    pos.gad;		
	    uparmtype.gad;		
	    pathorient.gad;		
	    up.gad;		
	    bank.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Material"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    shop_materialpath.row.join;		

	    { STRETCH(1,1) }
	}

	TAB "Render"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    tdisplay.row.join;		
	    vm_phantom.gad;		
	    vm_renderable.gad;		
	    viewportlod.gad;		
	    folder0.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Misc"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    use_dcolor.gad;		
	    dcolor.gad;		
	    picking.gad;		
	    pickscript.gad;		
	    caching.gad;		
	    vport_shadeopen.gad;		
	    vport_displayassubdiv.gad;		

	    { STRETCH(1,1) }
	}
    } 
}

# warning cpp warning: "GenV3/subdialog.top.ui":5 Macro "PARMSPACING" redefined.  Using later definition
# warning cpp warning: "GenV3/subdialog.top.ui":6 Macro "LAYOUTDIR" redefined.  Using later definition
# warning cpp warning: "GenV3/subdialog.top.ui":7 Macro "DO_JUSTIFY" redefined.  Using later definition
dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH 
    stdswitcher5.gad; 
    renderable.gad; 
    pr.gad; 
    childcomp.gad; 
    constraints_on.gad; 
    constraints_path.gad; 
    lookupobjpath.gad; 
    vport_onionskin.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val_) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
