{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "hedge, point", "group": "hedge", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["pointhedge"], "extent": [0, 15]}, {"type": "summary", "indent": 0, "text": ["Finds and returns a half-edge with a given source point or with given source and destination points."], "extent": [76, 184]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int pointhedge(<geometry>, int point)"]}], "role": "item", "extent": [184, 232]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int pointhedge(<geometry>, int srcpoint, int dstpoint)"]}], "role": "item", "extent": [232, 299]}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}, {"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["point"]}], "role": "item", "extent": [327, 340], "body": [{"type": "para", "indent": 4, "text": ["The point number in the geometry for the source point of the returned half-edge.  ", {"type": "code", "text": ["0"]}, " is the first point."], "extent": [340, 451]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["srcpoint"]}, ", ", {"type": "code", "text": ["dstpoint"]}], "role": "item", "extent": [451, 480], "body": [{"type": "para", "indent": 4, "text": ["The point numbers in the geometry for source and destination of returned half-edge.  ", {"type": "code", "text": ["0"]}, " is the first point."], "extent": [480, 594]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "role": "item", "extent": [594, 604], "body": [{"type": "para", "indent": 5, "text": ["The number of a half-edge that has ", {"type": "code", "text": ["point"]}, " as source or has ", {"type": "code", "text": ["srcpoint"]}, " as source and ", {"type": "code", "text": ["dstpoint"]}, " as destination.\n     In the former case, using ", {"type": "code", "text": ["op:pointhedgenext"]}, " one can enumerate over all the half-edges that have ", {"type": "code", "text": ["point"]}, " as source.\n     Returns ", {"type": "code", "text": ["-1"]}, " if the half-edge is not valid."], "extent": [604, 893]}], "container": true, "returns": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "examples", "container": true, "type": "examples_section", "indent": 0, "role": "section", "extent": [893, 903], "body": [{"lang": "vex", "type": "pre", "indent": 0, "text": ["\n\nint edge_count = 0;\n\n// Count number of *edges* (not half-edges) incident to point number 23.\nint hout = pointhedge(\"defgeo.bgeo\", 23);\nwhile ( hout != -1 )\n{\n    if (hedge_isprimary(\"defgeo.bgeo\", hout))\n        edge_count++;\n    int hin = hedge_prev(\"defgeo.bgeo\", hout);\n    if (hedge_isprimary(\"defgeo.bgeo\", hin))\n        edge_count++;\n    hout = pointhedgenext(\"defgeo\", hout);\n};\n\n"], "extent": [903, 1307]}], "text": "Examples"}], "title": ["pointhedge"], "summary": ["Finds and returns a half-edge with a given source point or with given source and destination points."], "included": ["/vex/functions/_common"]}