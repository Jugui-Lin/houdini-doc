{"type": "root", "attrs": {"bestbet": "vcc"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Vex compiler (vcc)"], "extent": [0, 23]}, {"type": "summary", "indent": 0, "text": ["Overview of how to use the VEX language compiler vcc and its\npre-processor and pragma statements."], "extent": [39, 144]}, {"type": "para", "indent": 0, "text": ["The ", {"type": "code", "text": ["vcc"]}, " compiler compiles VEX source code into a form executable by\nHoudini. The VEX compiler (vcc) is capable of compiling VEX code,\ngenerating dialog scripts for VEX functions, and also giving quick help\nby listing the global variables and functions available in any given context."], "extent": [144, 431]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Command-line options"], "extent": [431, 458], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Note"], "extent": [458, 466], "body": [{"type": "para", "indent": 4, "text": ["Most options have a short and a long form. The long form is shown in \n    square brackets after the short form."], "extent": [466, 583]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-h [--help]"]}, " "], "extent": [583, 599], "body": [{"type": "para", "indent": 4, "text": ["Show help message for the compiler."], "extent": [599, 644]}], "container": true}], "container": true}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Compiler options"], "extent": [644, 669], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-o [--vex-output] [", {"type": "var", "text": ["file"]}, "|-]"]}, " "], "extent": [669, 704], "body": [{"type": "para", "indent": 4, "text": ["Specify that a VEX code output is required. If the filename given \n    is 'stdout', then the output will be printed to the console. \n    If none of ", {"type": "code", "text": ["--hda-output"]}, ", ", {"type": "code", "text": ["--otl-output"]}, ", or ", {"type": "code", "text": ["--ds-output"]}, " are specified, this \n    option is implied. By default the output filename  is constructed from the \n    context function. If no context function is defined, then the input \n    filename is used as a base. If multiple input files are given, then the\n    filename argument will be ignored, and the output filename constructed\n    from the aforementioned rules."], "extent": [704, 1265]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-d [--compile-all]"]}, " "], "extent": [1265, 1288], "body": [{"type": "para", "indent": 4, "text": ["Compile all functions into the VEX code, even if they're not used by the\n    context function, either directly or indirectly. This option is useful for \n    doing syntax checking on include files."], "extent": [1288, 1489]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-z [--no-optimize]"]}, " "], "extent": [1489, 1513], "body": [{"type": "para", "indent": 4, "text": ["Generate unoptimized VEX code."], "extent": [1513, 1548]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-V [--no-version-id]"]}, " "], "extent": [1548, 1573], "body": [{"type": "para", "indent": 4, "text": ["Don\u2019t embed a Houdini version identifier in the VEX code."], "extent": [1573, 1636]}], "container": true}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Preprocessor options"], "extent": [1636, 1665], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-E [--parse-only]"]}, " "], "extent": [1665, 1687], "body": [{"type": "para", "indent": 4, "text": ["Only parse the input files to the standard output. No compilation will take\n    place."], "extent": [1687, 1778]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-D [--define] ", {"type": "var", "text": ["name"]}, "[=", {"type": "var", "text": ["value"]}, "]"]}, " "], "extent": [1778, 1817], "body": [{"type": "para", "indent": 4, "text": ["Define a macro for the pre-processor. If no value is given with the\n    name, the name is defined as 1."], "extent": [1817, 1925]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-I [--include-dir] ", {"type": "var", "text": ["path"]}, " "]}, " "], "extent": [1925, 1958], "body": [{"type": "para", "indent": 4, "text": ["Add the path specified to the include path (the list of directories\n    search for files referenced by the ", {"type": "code", "text": ["#include"]}, " directive to the\n    pre-processor). The standard Houdini include path is under\n    ", {"type": "code", "text": ["vex/include"]}, "."], "extent": [1958, 2180]}], "container": true}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Diagnostic options"], "extent": [2180, 2207], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-w id[,id...] "]}, " "], "extent": [2207, 2226], "body": [{"type": "para", "indent": 4, "text": ["Suppress printing of certain warnings and information messages. \n    ", {"type": "var", "text": ["wlist"]}, " is a comma-separated list of warning numbers to suppress."], "extent": [2226, 2367]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-F [--Werror]"]}, " "], "extent": [2367, 2385], "body": [{"type": "para", "indent": 4, "text": ["Treat all non-suppressed warnings as errors."], "extent": [2385, 2434]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-e [--Werror-output] ", {"type": "var", "text": ["file"]}]}, " "], "extent": [2434, 2468], "body": [{"type": "para", "indent": 4, "text": ["Redirect all diagnostic output to the filename given, rather than print\n    them to the standard error output."], "extent": [2468, 2583]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-q [--Wno-info]"]}, " "], "extent": [2583, 2603], "body": [{"type": "para", "indent": 4, "text": ["Suppress informational messages."], "extent": [2603, 2640]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-Q [--Werror-only]"]}, " "], "extent": [2640, 2663], "body": [{"type": "para", "indent": 4, "text": ["Suppress informational and warning messages. Overrides ", {"type": "code", "text": ["--Wno-info"]}, "."], "extent": [2663, 2736]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["--fmessage-limit <N>"]}, " "], "extent": [2736, 2761], "body": [{"type": "para", "indent": 4, "text": ["Set a maximum number of messages that will be printed before stopping.\n    Set to 0 (the default) for no limit."], "extent": [2761, 2878]}], "container": true}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["VEX Context options"], "extent": [2878, 2906], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-c [--context] ", {"type": "var", "text": ["name"]}]}, " "], "extent": [2906, 2934], "body": [{"type": "para", "indent": 4, "text": ["If no context function is defined, this can be used to specify which \n    VEX context to use when compiling the source(s)."], "extent": [2934, 3061]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-X [--list-context] ", {"type": "var", "text": ["context"]}]}, " "], "extent": [3061, 3097], "body": [{"type": "para", "indent": 4, "text": ["Print out global variables and function signatures defined for the given\n    VEX context. The argument value of ", {"type": "code", "text": ["contexts"]}, " can be used to list all \n    available VEX contexts."], "extent": [3097, 3278]}], "container": true}], "container": true}]}, {"level": 3, "id": "otl", "container": true, "type": "h", "indent": 0, "text": ["Asset options"], "extent": [3278, 3306], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-L [--hda-append] [", {"type": "var", "text": ["file"]}, "|-]"]}, " "], "extent": [3306, 3341], "body": [{"type": "para", "indent": 4, "text": ["Append a digital asset generated from the VEX source to the specified operator type library file. If the file doesn\u2019t exist, it will be created."], "extent": [3341, 3495]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-l [--hda-output] [", {"type": "var", "text": ["file"]}, "|-]"]}, " "], "extent": [3495, 3530], "body": [{"type": "para", "indent": 4, "text": ["Write a digital asset definition for the context function to the specified operator type library file. If the library file already exists, it will be overwritten."], "extent": [3530, 3698]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-K [--hda-vex-section] ", {"type": "var", "text": ["name"]}]}, " "], "extent": [3698, 3734], "body": [{"type": "para", "indent": 4, "text": ["Store the generated VEX code in the given section name in the HDA, rather \n    than the standard section name for the given VEX context."], "extent": [3734, 3875]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-a [--hda-dialog-script] ", {"type": "var", "text": ["file"]}]}, " "], "extent": [3875, 3913], "body": [{"type": "para", "indent": 4, "text": ["Use the parameter definitions in the given file instead of the ones \n    automatically generated from the VEX source. The dialog script\u2019s operator \n    definition will still be taken from the VEX source."], "extent": [3913, 4121]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-U [--hda-dialog-script-only]"]}, " "], "extent": [4121, 4155], "body": [{"type": "para", "indent": 4, "text": ["Only embed the dialog script into the OTL. No VEX code will be added."], "extent": [4155, 4229]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-n [--op-name] ", {"type": "var", "text": ["name"]}]}, " "], "extent": [4229, 4257], "body": [{"type": "para", "indent": 4, "text": ["Use the given name as the name for the operator. This overrides any\n    ", {"scheme": null, "value": "pragmas#opname", "type": "link", "text": [{"type": "code", "text": ["#pragma opname"]}], "fullpath": "/vex/pragmas#opname", "fragment": "#opname"}, " statement in the code."], "extent": [4257, 4390]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-S [--op-script-name] ", {"type": "var", "text": ["name"]}]}, " "], "extent": [4390, 4425], "body": [{"type": "para", "indent": 4, "text": ["Use the given name as the script name for the operator. This overrides any\n    ", {"scheme": null, "value": "pragmas#opscript", "type": "link", "text": [{"type": "code", "text": ["#pragma opscript"]}], "fullpath": "/vex/pragmas#opscript", "fragment": "#opscript"}, " statement in the code."], "extent": [4425, 4569]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-N [--op-label] ", {"type": "var", "text": ["name"]}]}, " "], "extent": [4569, 4598], "body": [{"type": "para", "indent": 4, "text": ["Use the given name as the UI label for the operator. This overides any\n    ", {"scheme": null, "value": "pragmas#opname", "type": "link", "text": [{"type": "code", "text": ["#pragma oplabel"]}], "fullpath": "/vex/pragmas#opname", "fragment": "#opname"}, " statement in the code."], "extent": [4598, 4735]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-C [--op-icon] ", {"type": "var", "text": ["name"]}]}, " "], "extent": [4735, 4763], "body": [{"type": "para", "indent": 4, "text": ["Use the given name as the icon to use for the operator. This overides any\n    ", {"scheme": null, "value": "pragmas#opicon", "type": "link", "text": [{"type": "code", "text": ["#pragma opicon"]}], "fullpath": "/vex/pragmas#opicon", "fragment": "#opicon"}, " statement in the code."], "extent": [4763, 4902]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-t [--op-min-inputs] ", {"type": "var", "text": ["N"]}]}, " "], "extent": [4902, 4933], "body": [{"type": "para", "indent": 4, "text": ["Set the minimum number of inputs for the operator. This overides any\n    ", {"scheme": null, "value": "pragmas#opinputs", "type": "link", "text": [{"type": "code", "text": ["#pragma opmininputs"]}], "fullpath": "/vex/pragmas#opinputs", "fragment": "#opinputs"}, " statement in the code. The minimum\n    input value will be adjusted to fit the operator type being generated."], "extent": [4933, 5161]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-T [--op-max-inputs] ", {"type": "var", "text": ["N"]}]}, " "], "extent": [5161, 5192], "body": [{"type": "para", "indent": 4, "text": ["Set the maximum number of inputs for the operator. This overides any\n    ", {"scheme": null, "value": "pragmas#opinputs", "type": "link", "text": [{"type": "code", "text": ["#pragma opmaxinputs"]}], "fullpath": "/vex/pragmas#opinputs", "fragment": "#opinputs"}, " statement in the code. The maximum\n    input value will be adjusted to fit the operator type being generated."], "extent": [5192, 5421]}], "container": true}], "container": true}]}, {"level": 3, "id": "ds", "container": true, "type": "h", "indent": 0, "text": ["Dialog Script options"], "extent": [5421, 5456], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-u [--ds-output] [", {"type": "var", "text": ["file"]}, "|-]"]}, " "], "extent": [5456, 5490], "body": [{"type": "para", "indent": 4, "text": ["Write a dialog script to the filename given. As with ", {"type": "code", "text": ["--vex-output"]}, " and \n    ", {"type": "code", "text": ["--hda-output"]}, ", if multiple input files are given, then the filename given \n    is ignored and the output filename automatically constructed from either \n    the context function name, or the input filename, if no context function is \n    defined."], "extent": [5490, 5824]}], "container": true}], "container": true}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Pre-processor"], "extent": [5824, 5844], "body": [{"type": "para", "indent": 0, "text": ["The compiler has a pre-processor which strips comments, reads include files,\nand expands macros."], "extent": [5844, 5943]}, {"type": "para", "indent": 0, "text": ["The pre-processor supports many of the usual C Pre-Processor\ndirectives:"], "extent": [5943, 6017]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#define ", {"type": "var", "text": ["name"]}, " ", {"type": "var", "text": ["token-string"]}, " "]}, " "], "extent": [6017, 6056], "body": [{"type": "para", "indent": 4, "text": ["Replace subsequent uses of ", {"type": "var", "text": ["name"]}, " with ", {"type": "var", "text": ["token-string"]}, "."], "extent": [6056, 6119]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#define ", {"type": "var", "text": ["name"]}, "(", {"type": "var", "text": ["arg"]}, ",...,", {"type": "var", "text": ["arg"]}, ") ", {"type": "var", "text": ["token-string"]}, " "]}, " "], "extent": [6119, 6179], "body": [{"type": "para", "indent": 4, "text": ["Replace subsequent instances of ", {"type": "var", "text": ["name"]}, " with ", {"type": "var", "text": ["token-string"]}, ". Each\n    argument to ", {"type": "var", "text": ["name"]}, " is replaced in ", {"type": "var", "text": ["token-string"]}, " during\n    expansion."], "extent": [6179, 6331]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#undef ", {"type": "var", "text": ["name"]}, " "]}, " "], "extent": [6331, 6352], "body": [{"type": "para", "indent": 4, "text": [{"type": "q", "text": ["Undefine"]}, " the macro so subsequent uses of ", {"type": "var", "text": ["name"]}, " are not\n    expanded."], "extent": [6352, 6430]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#include \"", {"type": "var", "text": ["filename"]}, "\""]}, " "], "extent": [6430, 6458], "body": [{"type": "para", "indent": 4, "text": ["Inserts the contents of the file at this point in the source code.\n    When you use quotes, the directory containing the current file is\n    searched for ", {"type": "var", "text": ["filename"]}, " before the standard locations (including\n    the path)."], "extent": [6458, 6685]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#sinclude \"", {"type": "var", "text": ["filename"]}, "\""]}, " "], "extent": [6685, 6714], "body": [{"type": "para", "indent": 4, "text": ["Like ", {"type": "code", "text": ["include"]}, " but silent (no warnings or errors when the file isn\u2019t found)."], "extent": [6714, 6795]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#includeall \"", {"type": "var", "text": ["filename"]}, "\""]}, " "], "extent": [6795, 6826], "body": [{"type": "para", "indent": 4, "text": ["Like ", {"type": "code", "text": ["include"]}, " but scans the include search path, including all files found."], "extent": [6826, 6907]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#ifdef ", {"type": "var", "text": ["name"]}, " "]}, " "], "extent": [6907, 6928], "body": [{"type": "para", "indent": 4, "text": ["The following lines until the next ", {"type": "code", "text": ["#endif"]}, " or ", {"type": "code", "text": ["else"]}, " directive will\n    be compiled if and only if ", {"type": "var", "text": ["name"]}, " is a defined macro."], "extent": [6928, 7061]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#ifndef ", {"type": "var", "text": ["name"]}, " "]}, " "], "extent": [7061, 7083], "body": [{"type": "para", "indent": 4, "text": ["The lines following will be compiled if and only if name is ", {"type": "em", "text": ["not"]}, " a\n    defined macro."], "extent": [7083, 7174]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#if ", {"type": "var", "text": ["constant-expr"]}, " "]}, " "], "extent": [7174, 7201], "body": [{"type": "para", "indent": 4, "text": ["The following lines until the next ", {"type": "code", "text": ["#endif"]}, " or ", {"type": "code", "text": ["#else"]}, " directive\n    will be compiled if and only if ", {"type": "var", "text": ["constant-expr"]}, " evaluates to\n    non-zero."], "extent": [7201, 7352]}, {"type": "para", "indent": 4, "text": ["The expression can use the following operators:"], "extent": [7352, 7405]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Comparisons (", {"type": "code", "text": ["=="]}, ", ", {"type": "code", "text": ["!="]}, ", ", {"type": "code", "text": ["<="]}, ", ", {"type": "code", "text": [">="]}, ", ", {"type": "code", "text": ["<"]}, ", ", {"type": "code", "text": [">"]}, ")"], "extent": [7405, 7459]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Logical AND (", {"type": "code", "text": ["&&"]}, "), OR (", {"type": "code", "text": ["||"]}, "), and NOT (", {"type": "code", "text": ["!"]}, ")."], "extent": [7459, 7512]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Bitwise AND (", {"type": "code", "text": ["&"]}, "), OR (", {"type": "code", "text": ["|"]}, "), exclusive OR (", {"type": "code", "text": ["^"]}, "), and NOT (", {"type": "code", "text": ["~"]}, ")."], "extent": [7512, 7583]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Arithmetic (", {"type": "code", "text": ["+"]}, ", ", {"type": "code", "text": ["-"]}, ", ", {"type": "code", "text": ["*"]}, ", ", {"type": "code", "text": ["/"]}, ", ", {"type": "code", "text": ["%"]}, ")."], "extent": [7583, 7628]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Parentheses."], "extent": [7628, 7648]}], "container": true}, {"type": "para", "indent": 4, "text": ["The expression can also use the following functions:"], "extent": [7648, 7706]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["defined(", {"type": "var", "text": ["name"]}, ")"]}, " "], "extent": [7706, 7732], "body": [{"type": "para", "indent": 8, "text": ["Returns 1 if the ", {"type": "var", "text": ["name"]}, " is a defined macro, or 0 if it is\n        not."], "extent": [7732, 7814]}, {"lang": "vex", "type": "pre", "indent": 8, "text": ["\n        #if defined(foo) && defined(fum)\n        "], "extent": [7814, 7893]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["environment(", {"type": "var", "text": ["name"]}, ")"]}, " "], "extent": [7893, 7923], "body": [{"type": "para", "indent": 8, "text": ["Returns 1 if ", {"type": "var", "text": ["name"]}, " is a defined environment variable."], "extent": [7923, 7988]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["access(", {"type": "var", "text": ["filename"]}, ")"]}, " "], "extent": [7988, 8017], "body": [{"type": "para", "indent": 8, "text": ["Returns 1 if ", {"type": "var", "text": ["filename"]}, " can be read by the application, or 0\n        if the file cannot be read."], "extent": [8017, 8125]}, {"lang": "vex", "type": "pre", "indent": 8, "text": ["\n        #if access(\"/etc/passwd\")\n        #include </etc/passwd>\n        #endif\n        "], "extent": [8125, 8243]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["strcmp(", {"type": "var", "text": ["str1"]}, ", ", {"type": "var", "text": ["str2"]}, ")"]}, " "], "extent": [8243, 8278], "body": [{"type": "para", "indent": 8, "text": ["Works the same as the C/C++ function of the same name, if the\n        two strings have the same contents, the function returns 0. Each\n        argument should be a quoted string or a macro that expands to a\n        quoted string."], "extent": [8278, 8517]}, {"lang": "vex", "type": "pre", "indent": 8, "text": ["\n        #define VALUE \"foo\"\n        #if strcmp(VALUE, \"bar\") != 0\n        This statement is false since \"foo\" != \"bar\"\n        #endif\n        #if !strcmp(VALUE, \"foo\")\n        This statement is TRUE since strcmp(\"foo\", \"bar\") == 0\n        #endif\n        "], "extent": [8517, 8801]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Expressions are evaluated from left to right (", {"type": "strong", "text": ["unlike the ANSI C\n    standard of right to left"]}, "). As with the ANSI pre-procssor, all\n    numbers must be integers."], "extent": [8801, 8978]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#else"]}, " "], "extent": [8978, 8988], "body": [{"type": "para", "indent": 4, "text": ["The following lines until the next ", {"type": "code", "text": ["#endif"]}, " directive will be\n    compiled if and only if the previous ", {"type": "code", "text": ["#if"]}, " directive evaluated to\n    zero."], "extent": [8988, 9134]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#endif"]}, " "], "extent": [9134, 9145], "body": [{"type": "para", "indent": 4, "text": ["Marks the end of a section of conditional code. Every test directive\n    must have a matching ", {"type": "code", "text": ["#endif"]}, "."], "extent": [9145, 9253]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#pragma ..."]}, " "], "extent": [9253, 9269], "body": [{"type": "para", "indent": 4, "text": ["Specifies extended language features. See the ", {"scheme": null, "value": "pragmas", "type": "link", "text": ["list of pragmas"], "fullpath": "/vex/pragmas"}, "."], "extent": [9269, 9347]}], "container": true}], "container": true}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Predefined macros"], "extent": [9347, 9373], "body": [{"type": "para", "indent": 0, "text": ["The following macros are pre-defined:"], "extent": [9373, 9417]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["__vex"]}, " "], "extent": [9417, 9427], "body": [{"type": "para", "indent": 4, "text": ["This symbol is always defined. You can use this in an ", {"type": "code", "text": ["if"]}, " pre-processor directive to check that the program is being compiled by vcc."], "extent": [9427, 9566]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["__vex_major"]}, " "], "extent": [9566, 9582], "body": [{"type": "para", "indent": 4, "text": ["The major version number of the compiler."], "extent": [9582, 9628]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["__vex_minor"]}, " "], "extent": [9628, 9644], "body": [{"type": "para", "indent": 4, "text": ["The minor version number of the compiler."], "extent": [9644, 9690]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["__vex_build"]}, " "], "extent": [9690, 9706], "body": [{"type": "para", "indent": 4, "text": ["The build version number of the compiler."], "extent": [9706, 9752]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["__vex_patch"]}, " "], "extent": [9752, 9768], "body": [{"type": "para", "indent": 4, "text": ["The patch version number of the compiler."], "extent": [9768, 9814]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["__LINE__"]}, " "], "extent": [9814, 9827], "body": [{"type": "para", "indent": 4, "text": ["The current line number of the source file."], "extent": [9827, 9875]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["__FILE__"]}, " "], "extent": [9875, 9888], "body": [{"type": "para", "indent": 4, "text": ["The file being compiled."], "extent": [9888, 9917]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["__DATE__"]}, " "], "extent": [9917, 9930], "body": [{"type": "para", "indent": 4, "text": ["The current date (as a quoted string). Example: ", {"type": "code", "text": ["\"Dec 31 1999\""]}], "extent": [9930, 9998]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["__TIME__"]}, " "], "extent": [9998, 10011], "body": [{"type": "para", "indent": 4, "text": ["The current time (as a quoted string). Example: ", {"type": "code", "text": ["\"23:59:59\""]}], "extent": [10011, 10081]}], "container": true}], "container": true}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nprintf(\"Starting shader %s at %s\", __FILE__, __DATE__);\n"], "extent": [10081, 10151]}]}]}], "title": ["Vex compiler (vcc)"], "summary": ["Overview of how to use the VEX language compiler vcc and its\npre-processor and pragma statements."]}