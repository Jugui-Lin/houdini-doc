{"type": "root", "attrs": {"type": "node", "context": "chop", "internal": "vopchop", "icon": "CHOP/vop_chop", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Channel VOP"], "extent": [68, 84]}, {"type": "summary", "indent": 0, "text": ["Contains a VOP network that can manipulate channel data."], "extent": [84, 149]}, {"type": "para", "indent": 0, "text": ["This node contains a ", {"scheme": null, "value": "/nodes/vop", "type": "link", "text": ["VOP network"], "fullpath": "/nodes/vop"}, " (double-click the node in the network editor to go inside it), which can use ", {"scheme": null, "value": "/vex/contexts/chop", "type": "link", "text": ["CHOP context "], "fullpath": "/vex/contexts/chop"}, " VOPs to manipulate channel data. "], "extent": [149, 342]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [342, 348], "body": [{"type": "para", "indent": 4, "text": ["To define a CHOP using a (textual) VEX program instead of a VOP network, use the ", {"scheme": "Node", "value": "/nodes/chop/channelwrangle", "type": "link", "text": ["Channel Wrangle"], "fullpath": "/nodes/chop/channelwrangle"}, " instead."], "extent": [348, 486]}], "container": true}, {"type": "note", "indent": 0, "role": "item", "extent": [486, 492], "body": [{"type": "para", "indent": 4, "text": ["If you create a ", {"type": "ui", "text": ["Transform VOP"]}, " node using the ", {"scheme": null, "value": "/basics/tabmenu", "type": "link", "text": ["Tab menu"], "fullpath": "/basics/tabmenu"}, ", it creates a Channel VOP and sets it to work with transform channels and constraints."], "extent": [492, 660]}], "container": true}, {"type": "note", "indent": 0, "role": "item", "extent": [660, 666], "body": [{"type": "para", "indent": 4, "text": ["Use ", {"scheme": null, "value": "/nodes/vop/chinput", "type": "link", "text": ["Get Channel Value"], "fullpath": "/nodes/vop/chinput"}, " node to query channel values from\n    other inputs at different samples index and channel index."], "extent": [666, 812]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["This node is useful for creating ", {"type": "q", "text": ["one-off"]}, " programs to manipulate channel data in a single network."], "extent": [812, 913]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [913, 925], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Compiler"], "extent": [925, 941], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Channel Names"], "extent": [1851, 1867], "body": [{"type": "para", "indent": 4, "text": ["Space separated names of the channels to create when the first input isn\u2019t connected.\n    Supports the same patterns as the ", {"type": "ui", "text": ["Scope"]}, " parameter."], "extent": [1886, 2036]}], "container": true, "attrs": {"id": "vex_name"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Channel Count"], "extent": [2036, 2051], "body": [{"type": "para", "indent": 4, "text": ["Repeats the ", {"type": "ui", "text": ["Channel Names"]}, " multiple times when the first input isn\u2019t connected."], "extent": [2071, 2159]}], "container": true, "attrs": {"id": "vex_count"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Iterate"], "extent": [2159, 2168], "body": [{"type": "para", "indent": 4, "text": ["How to iterate over channels and samples."], "extent": [2186, 2233]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Over Channels and Samples"], "extent": [2233, 2264], "body": [{"type": "para", "indent": 8, "text": ["Iterates over all the samples of a channel one channel at a time.\n        Use the ", {"type": "code", "text": ["V"]}, " global variable to read and write the current channel value."], "extent": [2264, 2420]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Over Samples and Channels"], "extent": [2420, 2451], "body": [{"type": "para", "indent": 8, "text": ["Iterates over channels one sample at a time.\n        Use the ", {"type": "code", "text": ["V"]}, " global variable to read and write the current channel value."], "extent": [2451, 2586]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Over Samples and Every Nth Channels"], "extent": [2586, 2627], "body": [{"type": "para", "indent": 8, "text": ["Iterates over channels one sample at a time, but you can evaluate a group of channels together.\n        Use the ", {"type": "ui", "text": ["Iterate Step"]}, " to define the size a channel group.\n        Use the ", {"type": "ui", "text": ["Iterate Names"]}, " with a ", {"type": "code", "text": ["@"]}, " prefix to read and write the current values."], "extent": [2627, 2891]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Over Samples and Every Translate/Rotate/Scale"], "extent": [2891, 2942], "body": [{"type": "para", "indent": 8, "text": ["Iterates over transform channels one sample at a time.\n        Access the translation vector using ", {"type": "code", "text": ["@t"]}, ", the rotation using ", {"type": "code", "text": ["@r"]}, " and the scale using ", {"type": "code", "text": ["@s"]}, ".\n        A ", {"type": "code", "text": ["struct chopConstraintContext"]}, " is also bound to the ", {"type": "code", "text": ["c"]}, " variable.\n        Use ", {"type": "code", "text": ["c->fetchInput(1)"]}, " to return the second input transform as a ", {"type": "code", "text": ["struct chopTRS"]}, ".\n        Use ", {"type": "code", "text": ["c->fetchInputMatrix(1)"]}, " to return the second input transform as a matrix."], "extent": [2942, 3360]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Over Clip"], "extent": [3360, 3375], "body": [{"type": "para", "indent": 8, "text": ["Runs the snippet a single time with ", {"type": "code", "text": ["C"]}, " and ", {"type": "code", "text": ["I"]}, " variables set to zero.\n        Use this to if you want to analyze all the channels using a snippet.\n        You can\u2019t write to the global variable ", {"type": "code", "text": ["V"]}, " or to any channel data.\n        You can read and write clip attributes using ", {"type": "code", "text": ["chattr"]}, " and ", {"type": "code", "text": ["chsetattr"]}, "."], "extent": [3375, 3686]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Over Channels"], "extent": [3686, 3705], "body": [{"type": "para", "indent": 8, "text": ["Runs the snippet one time per channel with the ", {"type": "code", "text": ["I"]}, " variable set to zero.\n        Use this to if you want to analyze channels individually using a snippet.\n        You can\u2019t write to the global variable ", {"type": "code", "text": ["V"]}, " or to any channel data.\n        You can read and write channel attributes using ", {"type": "code", "text": ["chattr"]}, " and ", {"type": "code", "text": ["chsetattr"]}, "."], "extent": [3705, 4026]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Over Sample"], "extent": [4026, 4043], "body": [{"type": "para", "indent": 8, "text": ["Runs the snippet one time per sample with the ", {"type": "code", "text": ["C"]}, " variable always set to zero.\n        Use this to if you want to analyze the all channel values for a single sample using a snippet.\n        You can\u2019t write to the global variable ", {"type": "code", "text": ["V"]}, " or to any channel data.\n        You can read and write sample attributes using ", {"type": "code", "text": ["chattr"]}, " and ", {"type": "code", "text": ["chsetattr"]}, "."], "extent": [4043, 4391]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "iterate"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Iterate Step"], "extent": [4391, 4405], "body": [{"type": "para", "indent": 4, "text": ["Sets the number of channels to regroup together when ", {"type": "ui", "text": ["Iterate"]}, " is set to ", {"type": "ui", "text": ["Every Nth Channels"]}, "."], "extent": [4428, 4532]}], "container": true, "attrs": {"id": "channel_step"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Iterate Names"], "extent": [4532, 4547], "body": [{"type": "para", "indent": 4, "text": ["A space separated string representing the bind names when ", {"type": "ui", "text": ["Iterate"]}, " is set to ", {"type": "ui", "text": ["Every Nth Channels"]}, ".\n    Use an iterate name prefixed by ", {"type": "code", "text": ["@"]}, " to read and write to a channel."], "extent": [4568, 4749]}], "container": true, "attrs": {"id": "bind_names"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Compiler"], "extent": [1123, 1133], "body": [{"type": "para", "indent": 4, "text": ["The command line Houdini uses to compile the VOP network inside this node."], "extent": [1133, 1213]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Force Compile"], "extent": [1213, 1228], "body": [{"type": "para", "indent": 4, "text": ["Recompiles the VOP network inside this node."], "extent": [1228, 1278]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Evaluation Node Path"], "extent": [4957, 4979], "body": [{"type": "para", "indent": 4, "text": ["VEX functions like ", {"type": "code", "text": ["ch()"]}, " usually evaluate with respect to this node.\n    Enter a node path here to override where the path search starts from.\n    This is useful for embedding in a digital asset, where you want searches\n    to start from the asset root."], "extent": [5001, 5261]}], "container": true, "attrs": {"id": "vex_cwdpath"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": "channel", "container": true, "type": "h", "indent": 0, "text": ["Channel"], "extent": [16, 40], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Align"], "extent": [40, 48], "body": [{"type": "para", "indent": 4, "text": ["The alignment option to use."], "extent": [48, 82]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Extend to Min/Max"], "extent": [82, 105], "body": [{"type": "para", "indent": 8, "text": ["Find the earliest start and latest end, and extend all\n        inputs to that range using the extend conditions."], "extent": [105, 226]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stretch to Min/Max"], "extent": [226, 250], "body": [{"type": "para", "indent": 8, "text": ["Find the earliest start and latest end, and stretch every\n        channel\u2019s start and end to that range."], "extent": [250, 363]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Shift to Minimum"], "extent": [363, 385], "body": [{"type": "para", "indent": 8, "text": ["Find the earliest start and shift all channels so they all\n        start at that index. All channels are extended to the length\n        of the longest one."], "extent": [385, 549]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Shift to Maximum"], "extent": [549, 571], "body": [{"type": "para", "indent": 8, "text": ["Find the latest end and shift all channels so they all end\n        at that index. Extend all channels to the length of the\n        longest one."], "extent": [571, 723]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Shift to First Interval"], "extent": [723, 752], "body": [{"type": "para", "indent": 8, "text": ["Shift all channels to the start of the first channel and\n        sample all inputs using the first input\u2019s range."], "extent": [752, 874]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Trim to First Interval"], "extent": [874, 902], "body": [{"type": "para", "indent": 8, "text": ["Trim all channels to first channel\u2019s range."], "extent": [902, 954]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stretch to First Interval"], "extent": [954, 985], "body": [{"type": "para", "indent": 8, "text": ["Stretch all channels to the first channel\u2019s range."], "extent": [985, 1044]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Trim to Smallest Interval"], "extent": [1044, 1075], "body": [{"type": "para", "indent": 8, "text": ["Trim all channels to the smallest start/end interval. The\n        start and end values may not come from the same channel."], "extent": [1075, 1206]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stretch to Smallest Interval"], "extent": [1206, 1240], "body": [{"type": "para", "indent": 8, "text": ["Stretch all channels to the smallest start/end interval. The\n        start and end values may not come from the same channel."], "extent": [1240, 1375]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Range"], "extent": [1375, 1382], "body": [{"type": "para", "indent": 4, "text": ["Specifies the range of data to generate."], "extent": [1382, 1428]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Use Full Animation Range"], "extent": [1428, 1458], "body": [{"type": "para", "indent": 8, "text": ["All of the animated range."], "extent": [1458, 1493]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Use Current Frame"], "extent": [1493, 1516], "body": [{"type": "para", "indent": 8, "text": ["Only the sample at the current frame."], "extent": [1516, 1562]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Use Start/End"], "extent": [1562, 1581], "body": [{"type": "para", "indent": 8, "text": ["The range is specified from the ", {"type": "ui", "text": ["Start"]}, " and ", {"type": "ui", "text": ["End"]}, "\n        parameters."], "extent": [1581, 1663]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Use Value Animation"], "extent": [1663, 1688], "body": [{"type": "para", "indent": 8, "text": ["The range is taken from range of keys available in the\n        evaluated Value parameters."], "extent": [1688, 1787]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start"], "extent": [1787, 1794], "body": [{"type": "para", "indent": 4, "text": ["The start time of the channel range."], "extent": [1817, 1859]}], "container": true, "attrs": {"channels": "/start"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["End"], "extent": [1859, 1864], "body": [{"type": "para", "indent": 4, "text": ["The end time of the channel range."], "extent": [1885, 1925]}], "container": true, "attrs": {"channels": "/end"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Sample Rate"], "extent": [1925, 1938], "body": [{"type": "para", "indent": 4, "text": ["The sample rate of the CHOP."], "extent": [1960, 1994]}], "container": true, "attrs": {"channels": "/rate"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Number of Threads"], "extent": [1994, 2013], "body": [{"type": "para", "indent": 4, "text": ["The number of separate threads to use to evaluate the channel samples.\n    The default is no threading."], "extent": [2013, 2122]}, {"type": "para", "indent": 4, "text": ["Since Houdini evaluates the VEX program for each sample in the input\n    geometry, it can benefit greatly from threading on a multi-processor\n    or multi-core machine when the CHOP nodes have many samples."], "extent": [2122, 2334]}], "container": true, "role": "item"}], "container": true}]}, {"level": 3, "id": "common", "container": true, "type": "h", "indent": 0, "text": ["Common"], "extent": [2334, 2356], "body": [{"type": "para", "indent": 0, "text": ["Some of these parameters may not be available on all CHOP nodes."], "extent": [2356, 2423]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Scope"], "extent": [2423, 2430], "body": [{"type": "para", "indent": 4, "text": ["To determine which channels get affected, some CHOPs have a scope string. Patterns can be used in the scope, for example ", {"type": "code", "text": ["*"]}, " (match all), and ", {"type": "code", "text": ["?"]}, " (match single character). "], "extent": [2430, 2612]}, {"type": "para", "indent": 4, "text": ["The following are examples of possible channel name matching options:"], "extent": [2612, 2691]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["chan2"]}], "extent": [2691, 2704], "body": [{"type": "para", "indent": 8, "text": ["Matches a single channel name."], "extent": [2704, 2748]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["chan3 tx ty tz"]}], "extent": [2748, 2770], "body": [{"type": "para", "indent": 8, "text": ["Matches four channel names, separated by spaces."], "extent": [2770, 2832]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["chan*"]}], "extent": [2832, 2845], "body": [{"type": "para", "indent": 8, "text": ["Matches each channel that starts with ", {"type": "code", "text": ["chan"]}, "."], "extent": [2845, 2908]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["*foot*"]}], "extent": [2908, 2922], "body": [{"type": "para", "indent": 8, "text": ["Matches each channel that has ", {"type": "code", "text": ["foot"]}, " in it."], "extent": [2922, 2979]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["t?"]}], "extent": [2979, 2989], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["?"]}, " matches a single character. ", {"type": "code", "text": ["t?"]}, " matches two-character channels starting with t.  "], "extent": [2989, 3093]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["r[xyz]"]}], "extent": [3093, 3107], "body": [{"type": "para", "indent": 8, "text": ["Matches channels ", {"type": "code", "text": ["rx"]}, ", ", {"type": "code", "text": ["ry"]}, " and ", {"type": "code", "text": ["rz"]}, "."], "extent": [3107, 3162]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["blend[3-7:2]"]}], "extent": [3162, 3182], "body": [{"type": "para", "indent": 8, "text": ["Matches number ranges giving ", {"type": "code", "text": ["blend3"]}, ", ", {"type": "code", "text": ["blend5"]}, ", and ", {"type": "code", "text": ["blend7"]}, "."], "extent": [3182, 3262]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["blend[2-3,5,13]"]}], "extent": [3262, 3285], "body": [{"type": "para", "indent": 8, "text": ["Matches channels ", {"type": "code", "text": ["blend2"]}, ", ", {"type": "code", "text": ["blend3"]}, ", ", {"type": "code", "text": ["blend5"]}, ", ", {"type": "code", "text": ["blend13"]}, "."], "extent": [3285, 3356]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["t[xyz]"]}], "extent": [3356, 3370], "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["[xyz]"]}, "matches three characters, giving channels ", {"type": "code", "text": ["tx"]}, ", ", {"type": "code", "text": ["ty"]}, " and ", {"type": "code", "text": ["tz"]}, "."], "extent": [3370, 3458]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Sample Rate Match"], "extent": [3458, 3477], "body": [{"type": "para", "indent": 4, "text": ["The Sample Rate Match Options handle cases where multiple input CHOPs\u2019 sample rates are different."], "extent": [3477, 3585]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Resample At First Input\u2019s Rate"], "extent": [3585, 3621], "body": [{"type": "para", "indent": 8, "text": ["Use rate of first input to resample others."], "extent": [3621, 3682]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Resample At Maximum Rate"], "extent": [3682, 3712], "body": [{"type": "para", "indent": 8, "text": ["Resample to highest sample rate."], "extent": [3712, 3758]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Resample At Minimum Rate"], "extent": [3758, 3788], "body": [{"type": "para", "indent": 8, "text": ["Resample to the lowest sample rate."], "extent": [3788, 3841]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Error if Rates Differ"], "extent": [3841, 3868], "body": [{"type": "para", "indent": 8, "text": ["Does not accept conflicting sample rates."], "extent": [3868, 3923]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Units"], "extent": [3923, 3930], "body": [{"type": "para", "indent": 4, "text": ["The units for which time parameters are specified."], "extent": [3930, 3990]}, {"type": "para", "indent": 4, "text": ["For example, you can specify the amount of time a lag should last for in seconds (default), frames (at the Houdini FPS), or samples (in the CHOP\u2019s sample rate)."], "extent": [3990, 4160]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [4160, 4170], "body": [{"type": "para", "indent": 8, "text": ["When you change the Units parameter, it does not convert the existing parameters to the new units."], "extent": [4170, 4282]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Slice"], "extent": [4282, 4294], "body": [{"type": "para", "indent": 4, "text": ["Time Slicing is a feature which boosts cooking performance and reduces memory usage. Traditionally, CHOPs calculate the channel over its entire frame range. If the channel does need to be evaluated every frame, then cooking the entire range of the channel is unnecessary. It is more efficient to calculate only the fraction of the channel that is needed. This fraction is known as a Time Slice."], "extent": [4294, 4694]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Unload"], "extent": [4694, 4702], "body": [{"type": "para", "indent": 4, "text": ["Causes the memory consumed by a CHOP to be released after it is cooked and the data passed to the next CHOP."], "extent": [4702, 4816]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Export Prefix"], "extent": [4816, 4836], "body": [{"type": "para", "indent": 4, "text": ["The Export prefix is prepended to CHOP channel names to determine where to export to. "], "extent": [4836, 4932]}, {"type": "para", "indent": 4, "text": ["For example, if the CHOP channel was named ", {"type": "code", "text": ["geo1:tx"]}, ", and the prefix was ", {"type": "code", "text": ["/obj"]}, ", the channel would be exported to ", {"type": "code", "text": ["/obj/geo1/tx"]}, "."], "extent": [4932, 5071]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [5071, 5081], "body": [{"type": "para", "indent": 8, "text": ["You can leave the ", {"type": "ui", "text": ["Export Prefix"]}, " blank, but then your CHOP track names need to be absolute paths, such as ", {"type": "code", "text": ["obj:geo1:tx"]}, "."], "extent": [5081, 5214]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Graph Color"], "extent": [5214, 5227], "body": [{"type": "para", "indent": 4, "text": ["Every CHOP has this option. Each CHOP gets a default color assigned for display in the Graph port, but you can override the color in the Common page under Graph Color. There are 36 RGB color combinations in the Palette."], "extent": [5227, 5452]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Graph Color Step"], "extent": [5452, 5470], "body": [{"type": "para", "indent": 4, "text": ["When the graph displays the animation curves and a CHOP has two or more channels, this defines the difference in color from one channel to the next, giving a rainbow spectrum of colors."], "extent": [5470, 5661]}], "container": true, "role": "item"}], "container": true}]}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [1367, 1376], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/chop/channelwrangle", "type": "link", "text": "", "fullpath": "/nodes/chop/channelwrangle"}], "extent": [1376, 1406]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/hom/nodeuserdata", "type": "link", "text": ["Per-node user-defined data"], "fullpath": "/hom/nodeuserdata"}], "extent": [1406, 1456]}], "container": true}], "text": "Related"}], "title": ["Channel VOP"], "summary": ["Contains a VOP network that can manipulate channel data."], "included": ["/nodes/chop/channelwrangle", "/nodes/chop/common", "/nodes/sop/wrangle_syntax", "/vex/_enforce_prototypes", "/vex/contexts/chop"]}