{"type": "root", "attrs": {"type": "node", "context": "out", "internal": "usdrender", "icon": "ROP/usdrender", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["USD Render"], "extent": [0, 15]}, {"type": "summary", "indent": 0, "text": ["Renders an output image from the stage generated by a LOP network."], "extent": [97, 172]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [172, 187], "body": [{"type": "para", "indent": 0, "text": ["This node writes the USD generated by a LOP network to a temp file, then launches an external process (by default, ", {"scheme": null, "value": "/ref/utils/husk", "type": "link", "text": ["husk"], "fullpath": "/ref/utils/husk"}, ") to render an image or image sequence from the USD."], "extent": [187, 379]}, {"type": "para", "indent": 0, "text": ["Rendering uses the same USD interface (Hydra) as is used to render the Solaris viewport, but instead of displaying the generated pixel buffers, the renderer saves them to image files. You can choose to render using any Hydra client registered with USD."], "extent": [379, 634]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Configuration"], "extent": [634, 654], "body": [{"type": "para", "indent": 0, "text": ["Traditionally in Houdini, the renderer was configured using parameters on the render node. In USD, however, render settings are stored in a ", {"type": "code", "text": ["RenderSettings"]}, " primitive in the scene tree."], "extent": [654, 842]}, {"type": "para", "indent": 0, "text": ["See the help for the ", {"scheme": "Node", "value": "/nodes/lop/rendersettings", "type": "link", "text": ["Render Settings LOP"], "fullpath": "/nodes/lop/rendersettings"}, ", ", {"scheme": "Node", "value": "/nodes/lop/renderproduct", "type": "link", "text": ["Render Product LOP"], "fullpath": "/nodes/lop/renderproduct"}, ", and ", {"scheme": "Node", "value": "/nodes/lop/rendervar", "type": "link", "text": ["Render Var LOP"], "fullpath": "/nodes/lop/rendervar"}, " for more information about creating USD render settings."], "extent": [842, 1053]}, {"type": "para", "indent": 0, "text": ["The parameters on this node primarily deal with launching the render process, with just a few options to override key options for controlling the render."], "extent": [1053, 1209]}]}, {"level": 2, "id": "list", "container": true, "type": "h", "indent": 0, "text": ["Available renderers"], "extent": [1209, 1242], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["The list of renderers is filtered based on the data returned by the ", {"type": "code", "text": ["usdrenderers.py"]}, " script. The ", {"scheme": null, "value": "/ref/util/husk", "type": "link", "text": ["husk"], "fullpath": "/ref/util/husk"}, " utility, and by extension the USD Render node, only support renderers that can generate AOV buffers (that is, renderers whose ", {"type": "code", "text": ["aovsupport"]}, " attribute is ", {"type": "code", "text": ["True"]}, ")."], "extent": [1242, 1527]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["To render to other delegates, such as Houdini GL and Storm, that do not support AOV generation, use the ", {"scheme": "Node", "value": "/nodes/out/opengl", "type": "link", "text": ["OpenGL ROP"], "fullpath": "/nodes/out/opengl"}, " (this basically updates the viewport and takes a snapshot of its contents)."], "extent": [1527, 1739]}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [1516, 1521], "body": [{"type": "para", "indent": 4, "text": ["You need to make sure the render delegate is found by the USD plug-in search, using the ", {"type": "code", "text": ["PXR_PLUGINPATH_NAME"]}, " environment variable."], "extent": [1551, 1688]}, {"type": "para", "indent": 4, "text": ["You can also set the environment variable ", {"type": "code", "text": ["TF_DEBUG"]}, " to ", {"type": "code", "text": ["PLUG_*"]}, ", which causes the USD library to print out useful information as it scans for and loads plug-ins."], "extent": [1688, 1857]}], "container": true, "attrs": {"id": "render_delegate_tip"}}], "container": true, "role": "item_group"}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1785, 1797], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Render to Disk"], "extent": [1797, 1814], "body": [{"type": "para", "indent": 4, "text": ["Renders with the last render control settings. This blocks Houdini until the render completes."], "extent": [1832, 1932]}], "container": true, "attrs": {"id": "execute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render to MPlay"], "extent": [1932, 1949], "body": [{"type": "para", "indent": 4, "text": ["Render directly into an MPlay preview window, instead of to an image file. (You can save the image to disk from inside MPlay.)"], "extent": [1973, 2105]}], "container": true, "attrs": {"id": "renderpreview"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render to Disk in Background"], "extent": [2105, 2135], "body": [{"type": "para", "indent": 4, "text": ["Renders with the last render control settings in a background process."], "extent": [2163, 2239]}], "container": true, "attrs": {"id": "executebackground"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Controls"], "extent": [1516, 1526], "body": [{"type": "para", "indent": 8, "text": ["Click to open a dialog that lets you launch a ", {"type": "q", "text": ["one-off"]}, " render with different frame range and dependency settings."], "extent": [1553, 1677]}], "container": true, "attrs": {"id": "renderdialog"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Valid Frame Range"], "extent": [2267, 2286], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Render Current Frame"], "extent": [2286, 2312], "body": [{"type": "para", "indent": 8, "text": ["Render the current frame number (in the playbar)."], "extent": [2312, 2371]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Render Frame Range"], "extent": [2371, 2395], "body": [{"type": "para", "indent": 8, "text": ["Render each frame in the range set by the ", {"type": "ui", "text": ["Start/End/Inc"]}, " parameters below."], "extent": [2395, 2482]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Render Frame Range (Strict)"], "extent": [2482, 2515], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "q", "text": ["Render Frame Range"]}, " option may generate frames outside the given range if they're requested by a render dependency. If you choose this option, this node will never render frames outside the given range."], "extent": [2515, 2732]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Render Frame Range From Stage"], "extent": [2732, 2771], "body": [{"type": "para", "indent": 16, "text": ["Examines the USD stage of the source LOP node for a start and end timecode value. These are used as the start and end of the frame range to render. If the stage does not have this metadata set, executing a render operation will result in an error."], "extent": [2771, 3036]}], "container": true}], "container": true}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start/End/Inc"], "extent": [2739, 2754], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Valid frame range"]}, " is ", {"type": "q", "text": ["Render frame range"]}, " or ", {"type": "q", "text": ["Render frame range (strict)"]}, ", the start and end frames (inclusive) and interval."], "extent": [2770, 2915]}], "container": true, "attrs": {"id": "f"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Preroll/Postroll/Inc"], "extent": [2915, 2937], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Valid frame range"]}, " is ", {"type": "q", "text": ["Render stage\u2019s frame range"]}, ", the number of frames before and after the stage\u2019s official start and end frame to save, and the interval between time samples."], "extent": [2959, 3155]}], "container": true, "attrs": {"id": "foffset"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render All Frames With a Single Process"], "extent": [3076, 3117], "body": [{"type": "para", "indent": 4, "text": ["Render all frames in a background process. Default is off. This allows continued interaction with Houdini while the render process runs."], "extent": [3143, 3285]}, {"type": "para", "indent": 4, "text": ["To render multiple frames, the render process renders an image then advances the time on the scene and renders the next image (just like how the Solaris viewport plays back animation). If there is a lot of data shared between frames, this can render significantly faster compared to rendering a single frame per process."], "extent": [3285, 3611]}], "container": true, "attrs": {"id": "allframesatonce"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render Delegate"], "extent": [3611, 3628], "body": [{"type": "para", "indent": 4, "text": ["The Hydra client to use to render the images. The default is Karma. Alternate Hydra clients must be registered with Houdini\u2019s USD libraries. See how the node gets the ", {"scheme": null, "value": "#list", "type": "link", "text": ["list of available renderers"], "fullpath": "/nodes/out/usdrender#list", "fragment": "#list"}, " above."], "extent": [3628, 3843]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["LOP Path"], "extent": [3843, 3853], "body": [{"type": "para", "indent": 4, "text": ["Render the USD stage output by this node. If this is blank, the node uses the node with the display flag."], "extent": [3871, 3982]}], "container": true, "attrs": {"id": "loppath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render Settings"], "extent": [3982, 3999], "body": [{"type": "para", "indent": 4, "text": ["Scene graph path to the ", {"type": "code", "text": ["RenderSettings"]}, " prim to render with. (If this is blank, the node looks for default render settings on the root prim. If the root prim has no render settings, the node will use default settings.)"], "extent": [4024, 4249]}], "container": true, "attrs": {"id": "rendersettings"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Override Output Image"], "extent": [4249, 4272], "body": [{"type": "para", "indent": 4, "text": ["If this is not blank, render to this file path instead of the output specified in the ", {"type": "code", "text": ["RenderSettings"]}, " prim."], "extent": [4294, 4409]}], "container": true, "attrs": {"id": "outputimage"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Husk"], "extent": [4409, 4420], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Rendering"], "extent": [4420, 4439], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Instantaneous Shutter"], "extent": [4439, 4463], "body": [{"type": "para", "indent": 4, "text": ["Disable motion blur by setting the camera to have an instantaneous shutter time."], "extent": [4463, 4549]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Purpose"], "extent": [4549, 4558], "body": [{"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["Comma"]}, " separated list of purposes to render (from ", {"type": "code", "text": ["geometry"]}, ", ", {"type": "code", "text": ["guide"]}, ", ", {"type": "code", "text": ["proxy"]}, ", and ", {"type": "code", "text": ["render"]}, "). The default is ", {"type": "code", "text": ["geometry,render"]}, "."], "extent": [4581, 4716]}], "container": true, "attrs": {"id": "husk_purpose"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Complexity"], "extent": [4716, 4728], "body": [{"type": "para", "indent": 4, "text": ["Geometry complexity."], "extent": [4754, 4780]}, {"type": "para", "indent": 4, "text": ["???"], "extent": [4780, 4789]}], "container": true, "attrs": {"id": "husk_complexity"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delegate Products"], "extent": [4789, 4808], "body": [{"type": "para", "indent": 4, "text": ["Enable render delegate products.  These allow render delegates to save non-raster products like deep images or photon maps.  These render products are render delegate specific."], "extent": [4808, 4990]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Restart Delegate"], "extent": [4990, 5008], "body": [{"type": "para", "indent": 4, "text": ["Normally, when rendering sequences, ", {"type": "code", "text": ["husk"]}, " uses UDS delta operations to make rendering more efficient.  The delegate is only told about scene data that changes frame-to-frame so it can share work between frames."], "extent": [5008, 5225]}, {"type": "para", "indent": 4, "text": ["This option will force the render delegate to be restarted when rendering sequences."], "extent": [5225, 5315]}, {"type": "para", "indent": 4, "text": ["Since restarting the delegate will cause the scene to be rebuilt, using this option can have significant performance impact and should only be used if required."], "extent": [5315, 5481]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Snapshot Interval"], "extent": [5856, 5875], "body": [{"type": "para", "indent": 4, "text": ["When this is on, the renderer writes out a snapshot file and partial image at every interval of this many seconds."], "extent": [5875, 5995]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Limit"], "extent": [5995, 6007], "body": [{"type": "para", "indent": 4, "text": ["When this is on, the renderer will terminate if the render time limit is exceeded.  Note that ", {"type": "code", "text": ["husk"]}, " will save the partial result before terminating."], "extent": [6007, 6162]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Limit Per-Image"], "extent": [6162, 6184], "body": [{"type": "para", "indent": 4, "text": ["When rendering multiple frames in a single process (Render All Frames With a Single Process), the time limit specified is applied per image rather than the entire sequence of images."], "extent": [6184, 6373]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Monitor"], "extent": [6373, 6389], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["MPlay Monitor"], "extent": [6389, 6405], "body": [{"type": "para", "indent": 4, "text": ["When rendering to disk, open an MPlay window to interactively monitor progress."], "extent": [6426, 6511]}], "container": true, "attrs": {"id": "husk_mplay"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["AOVs"], "extent": [6511, 6517], "body": [{"type": "para", "indent": 4, "text": ["This is the list of AOVs to display in the MPlay monitor.  Specifying ", {"type": "code", "text": ["-"]}, " will monitor all AOVs."], "extent": [6517, 6619]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Monitor Zoom"], "extent": [6619, 6633], "body": [{"type": "para", "indent": 4, "text": ["This is a zoom factor applied to the monitor.  The monitor will display images at a fraction of the full resolution while the image written to disk will be full resolution."], "extent": [6658, 6836]}], "container": true, "attrs": {"id": "husk_mplayzoom"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["MPlay Session Name"], "extent": [6836, 6856], "body": [{"type": "para", "indent": 4, "text": ["When rendering to MPlay, all Houdini sessions will send the output to the same MPlay flipbook. This can be problematic when running multiple Houdini sessions. The MPlay Label lets you specify a label for the MPlay associated with the output driver. Only renders which match the given label will be sent to that MPlay."], "extent": [6881, 7204]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Houdini Process ID"], "extent": [7204, 7228], "body": [{"type": "para", "indent": 8, "text": ["Uses the operating system process identifier so that the MPlay flipbook will only accept renders from that Houdini session."], "extent": [7228, 7361]}], "container": true}, {"type": "dt", "indent": 4, "text": ["HIP Name"], "extent": [7361, 7375], "body": [{"type": "para", "indent": 8, "text": ["Uses the ", {"type": "code", "text": ["$HIPNAME"]}, " variable so the MPlay will only accept renders from the running ", {"type": "code", "text": ["$HIP"]}, " file."], "extent": [7375, 7481]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Output Driver Name"], "extent": [7481, 7505], "body": [{"type": "para", "indent": 8, "text": ["The MPlay flipbook will only accept renders from the given output driver. For example, if you copy paste the output driver, each output driver will be sent to different MPlay flipbooks because the operators will have different names."], "extent": [7505, 7748]}, {"type": "para", "indent": 8, "text": ["If there are multiple Houdini sessions, there may be output drivers in the other session which match the same operator name."], "extent": [7748, 7882]}, {"type": "para", "indent": 8, "text": ["For example, say you have two output drivers: ", {"type": "q", "text": ["High quality"]}, " and ", {"type": "q", "text": ["Low Quality"]}, ". If you set the MPlay Label to different values for the two output drivers, each render will be sent to different MPlay sessions."], "extent": [7882, 8101]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "husk_mplayname"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Python"], "extent": [8101, 8116], "body": [{"type": "para", "indent": 0, "text": ["Similar to how Houdini can run scripts during rendering, ", {"type": "code", "text": ["husk"]}, " can also run Python scripts.  These Python scripts can access the Usd stage using the ", {"type": "code", "text": ["stage"]}, " variable in Python."], "extent": [8116, 8296]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Husk Pre-Render"], "extent": [8296, 8313], "body": [{"type": "para", "indent": 4, "text": ["The Python script ", {"type": "code", "text": ["husk"]}, " runs before any rendering begins."], "extent": [8313, 8377]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Husk Pre-Frame"], "extent": [8377, 8393], "body": [{"type": "para", "indent": 4, "text": ["The Python script ", {"type": "code", "text": ["husk"]}, " runs before rendering each frame."], "extent": [8393, 8457]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Husk Post-Frame"], "extent": [8457, 8474], "body": [{"type": "para", "indent": 4, "text": ["The Python script ", {"type": "code", "text": ["husk"]}, " runs after rendering each frame.  This is run after all render products are saved."], "extent": [8474, 8587]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Husk Post-Render"], "extent": [8587, 8605], "body": [{"type": "para", "indent": 4, "text": ["The Python script ", {"type": "code", "text": ["husk"]}, " runs after all rendering."], "extent": [8605, 8662]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tiles"], "extent": [8662, 8676], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Tiled Render"], "extent": [8676, 8691], "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["husk"]}, " can break up a single large image into multiple tiles and render each tile independently.  It does this by overriding the ", {"type": "code", "text": ["dataWindowNDC"]}, " setting defined on the render settings."], "extent": [8691, 8881]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Count"], "extent": [8881, 8888], "body": [{"type": "para", "indent": 4, "text": ["The number of tiles in the X and Y resolutions."], "extent": [8888, 8941]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Index"], "extent": [8941, 8948], "body": [{"type": "para", "indent": 4, "text": ["This is the tile that ", {"type": "code", "text": ["husk"]}, " should render.  The value should be between ", {"type": "code", "text": ["0"]}, " and the total number of tiles (", {"type": "code", "text": ["Count.x*Count.y"]}, ")."], "extent": [8948, 9081]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Suffix"], "extent": [9081, 9089], "body": [{"type": "para", "indent": 4, "text": ["Each output image will be suffixed with this string.  The string supports the same variable expansion ", {"type": "code", "text": ["husk"]}, " does on output images, but replacing the ", {"type": "code", "text": ["%02d"]}, " with the tile index instead of the frame number."], "extent": [9089, 9301]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Statistics"], "extent": [9301, 9320], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Print Command Line to Console"], "extent": [9320, 9352], "body": [{"type": "para", "indent": 4, "text": ["This option can be used to debug exactly what command the ROP is executing."], "extent": [9352, 9433]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Verbosity"], "extent": [9433, 9444], "body": [{"type": "para", "indent": 4, "text": ["How much information to print out while rendering. Normally you should avoid ", {"type": "q", "text": ["Full with VEX profiling"]}, " (slow) or ", {"type": "q", "text": ["Full with VEX Profiling and NaN checks"]}, " (very slow), though they may be useful for debugging."], "extent": [9444, 9657]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["USD Trace"], "extent": [9657, 9668], "body": [{"type": "para", "indent": 4, "text": ["This enables USD tracing.  This information can be used to profile Usd performance in ", {"type": "code", "text": ["husk"]}, "."], "extent": [9694, 9793]}], "container": true, "attrs": {"id": "husk_usdtracing"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Chrome File"], "extent": [9793, 9806], "body": [{"type": "para", "indent": 4, "text": ["When using Chrome tracing, this is the file where the trace log should be stored."], "extent": [9832, 9919]}], "container": true, "attrs": {"id": "husk_chromefile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Log Output"], "extent": [9919, 9931], "body": [{"type": "para", "indent": 4, "text": ["Capture the output from ", {"type": "code", "text": ["husk"]}, " and store the log in a file on disk."], "extent": [9950, 10023]}], "container": true, "attrs": {"id": "husk_log"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Append to Log Instead of Overwriting"], "extent": [10023, 10061], "body": [{"type": "para", "indent": 4, "text": ["Normally ", {"type": "code", "text": ["husk"]}, " will overwrite the log file on each run.  This option will cause output to be appended to the text in existing files."], "extent": [10086, 10225]}], "container": true, "attrs": {"id": "husk_logappend"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Log"], "extent": [10225, 10237], "body": [{"type": "para", "indent": 4, "text": ["This is the file where normal messages should be saved."], "extent": [10259, 10320]}], "container": true, "attrs": {"id": "husk_stdout"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Error Log"], "extent": [10320, 10331], "body": [{"type": "para", "indent": 4, "text": ["This is the file to which error messages should be saved. If this is the same file specified for the Output Log, the output and error messages will be interleaved (in the same way they are written to the console)."], "extent": [10353, 10573]}], "container": true, "attrs": {"id": "husk_stderr"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Usd"], "extent": [10573, 10583], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Resolver Context Asset Path"], "extent": [10583, 10613], "body": [{"type": "para", "indent": 4, "text": ["This file path is passed to the render command line as the ", {"type": "code", "text": ["resolver-context"]}, " option. This argument is used to create an asset resolver context that helps the asset resolver find files while composing the USD stage. The default of this parameter is an expression that returns the corresponding parameter on the LOP Network that contains the selected ", {"type": "ui", "text": ["LOP path"]}], "extent": [10639, 11007]}], "container": true, "attrs": {"id": "resolvercontext"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Strip Layers Above Layer Breaks"], "extent": [6097, 6130], "body": [{"type": "para", "indent": 8, "text": ["Enable this option to prevent layers authored above Layer Break nodes from being written to disk by this ROP. This allows a Layer Break node to dictate which portions of the LOP Network are to be saved. Disabling this option allows this behavior to be overridden, forcing the full stage authored by the LOP network to be written to disk. This may be used for debugging purposes, or to write a complete scene to disk for rendering."], "extent": [6161, 6601]}], "container": true, "attrs": {"id": "striplayerbreaks"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Strip Post-Layers"], "extent": [6601, 6620], "body": [{"type": "para", "indent": 8, "text": ["Enable this option to prevent layers added using the ", {"scheme": "Hom", "value": "/hom/hou/LopNetwork#editablePostLayer", "type": "link", "text": "", "fallback_text": "hou.LopNetwork.editablePostLayer", "fullpath": "/hom/hou/LopNetwork#editablePostLayer", "fragment": "#editablePostLayer"}, " method from being written to disk. With this option disabled, these post-layers are flattened into the layer ", {"type": "ui", "text": ["Output file"]}, " layer."], "extent": [6650, 6883]}], "container": true, "attrs": {"id": "strippostlayers"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Context Options "], "extent": [11070, 11094], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Number of Options"], "extent": [11094, 11118], "body": [{"type": "para", "indent": 8, "text": ["Lets you specify context options that only apply while rendering from this node. Set the number of context options to define/override, or use the plus and minus buttons to add or remove options."], "extent": [11144, 11348]}, {"type": "para", "indent": 8, "text": ["You could have two separate render nodes with different context options, so they would write out different USD from the same LOP network depending on uses of ", {"type": "code", "text": ["@contextoption"]}, " references in expressions. This could be useful for wedging, or to cause the LOP network to configure the stage in ways that are not good for interactively, but useful for rendering."], "extent": [11348, 11715]}], "container": true, "attrs": {"id": "optioncount"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Name"], "extent": [16620, 16641], "body": [{"type": "para", "indent": 16, "text": ["For each option, the name of the option. You can reference this option in an expression using ", {"type": "code", "text": ["@", {"type": "var", "text": ["name"]}]}, "."], "extent": [16673, 16797]}], "container": true, "attrs": {"id": "optionname"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Type"], "extent": [16797, 16818], "body": [{"type": "para", "indent": 16, "text": ["For each option, the type of data stored in the option, either a floating point number of a string."], "extent": [16851, 16968]}], "container": true, "attrs": {"id": "optiontype"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Value"], "extent": [16968, 16990], "body": [{"type": "para", "indent": 16, "text": ["For each option, the value of the option (while this node writes out USD)."], "extent": [17024, 17117]}], "container": true, "attrs": {"id": "optionvalue"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Driver"], "extent": [11807, 11820], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Render Command"], "extent": [11820, 11837], "body": [{"type": "para", "indent": 4, "text": ["This is the external command used to render. If this parameter is disabled (by turning off the ", {"type": "ui", "text": ["Run command"]}, " parameter) the command is not executed. The USD scene will still be output to disk, and the command will be output to the console (if ", {"type": "ui", "text": ["Print command line to console"]}, " is turned on), but the command will not actually be run. Disabling the running of the command also prevents the deletion of the generated USD files, even if they are in the Houdini temp directory. This mode can be very useful for debugging or for batch farm rendering."], "extent": [11837, 12390]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Wait for Render to Complete"], "extent": [12390, 12419], "body": [{"type": "para", "indent": 4, "text": ["Causes Houdini to freeze after starting the render process, and only resume when the renderer exits. (This is included mostly for parameter parity with the old Mantra render nodes. It may be useful to implement a crude form of dependency ordering when batch rendering.)"], "extent": [12449, 12724]}], "container": true, "attrs": {"id": "soho_foreground"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Alfred Style Progress"], "extent": [17639, 17662], "body": [{"type": "para", "indent": 8, "text": ["Print percentage complete value as files are written. This is in the style expected by Pixar\u2019s Alfred render queue."], "extent": [17688, 17813]}], "container": true, "attrs": {"id": "alfprogress"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Intermediate Directories"], "extent": [12751, 12784], "body": [{"type": "para", "indent": 4, "text": ["Create intermediate parent directories for output files as needed, such as for generated images."], "extent": [12801, 12903]}], "container": true, "attrs": {"id": "mkpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["USD Output Directory"], "extent": [12903, 12925], "body": [{"type": "para", "indent": 4, "text": ["The directory where any required USD files will be saved. If this directory is in the ", {"type": "code", "text": ["$HOUDINI_TEMP_DIR"]}, ", it will be deleted automatically when the render is complete."], "extent": [12925, 13099]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Maximum Threads"], "extent": [13099, 13116], "body": [{"type": "para", "indent": 4, "text": ["Uses the ", {"type": "code", "text": ["-j"]}, " command line option to ", {"type": "code", "text": ["husk"]}, " to specify the maximum number of threads that process should use. This parameter can be enabled to ensure that some portion of the computer\u2019s processing powere remains available for tasks other than the render. Positive values specify an absolute number of threads. Negative values indicate that the number of threads should be equal to the number of CPU cores on the machines minus the specified number."], "extent": [13116, 13570]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Initialize Simulation OPs"], "extent": [17540, 17567], "body": [{"type": "para", "indent": 4, "text": ["Initialize DOP simulations before rendering."], "extent": [17589, 17639]}], "container": true, "attrs": {"id": "initsim"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Scripts"], "extent": [13594, 13608], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Pre-Render Script"], "extent": [17123, 17143], "body": [{"type": "para", "indent": 4, "text": ["This command is run once, before any files are generated."], "extent": [17167, 17230]}], "container": true, "attrs": {"id": "prerender"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pre-Frame Script"], "extent": [17230, 17248], "body": [{"type": "para", "indent": 4, "text": ["This command is run before each frame is generated."], "extent": [17271, 17328]}], "container": true, "attrs": {"id": "preframe"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Post-Frame Script"], "extent": [17328, 17347], "body": [{"type": "para", "indent": 4, "text": ["This command is run after each frame is generated."], "extent": [17371, 17427]}], "container": true, "attrs": {"id": "postframe"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Post-Render Script"], "extent": [17427, 17447], "body": [{"type": "para", "indent": 4, "text": ["This command is run once, after all files have been generated."], "extent": [17472, 17540]}], "container": true, "attrs": {"id": "postrender"}, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}], "title": ["USD Render"], "summary": ["Renders an output image from the stage generated by a LOP network."], "included": ["/nodes/out/usd", "/solaris/output", "/solaris/view"]}