{"type": "root", "attrs": {"type": "node", "context": "vop", "internal": "pcopen", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Point Cloud Open"], "extent": [46, 67]}, {"type": "summary", "indent": 0, "text": ["This node opens a point cloud file and searches for points around a source position."], "extent": [67, 160]}, {"type": "para", "indent": 0, "text": ["This VOP opens a point cloud file (", {"type": "code", "text": [".pc"]}, ") and queues up access to the\npoints centered around a certain location.  The pcopen VOP invokes the\nunderlying ", {"scheme": "Vex", "value": "/vex/functions/pcopen", "type": "link", "text": "", "fallback_text": "pcopen()", "fullpath": "/vex/functions/pcopen"}, " VEX function."], "extent": [160, 340]}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [340, 348], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["file"], "extent": [348, 355], "body": [{"type": "para", "indent": 4, "text": ["The name of the file to load.  Point cloud files use the .pc extension,\n    but it is also possible to load geometry files as point clouds."], "extent": [355, 500]}], "container": true}, {"type": "dt", "indent": 0, "text": ["pchannel"], "extent": [500, 510], "body": [{"type": "para", "indent": 4, "text": ["The name of the channel in the texture which contains the position to\n    be searched."], "extent": [510, 602]}], "container": true}, {"type": "dt", "indent": 0, "text": ["P"], "extent": [602, 605], "body": [{"type": "para", "indent": 4, "text": ["The query position.  The search for points in the file will begin at\n    this position."], "extent": [605, 698]}], "container": true}, {"type": "dt", "indent": 0, "text": ["nchannel"], "extent": [698, 708], "body": [{"type": "para", "indent": 4, "text": ["Optionally, a normal channel can be provided to restrict the point\n    search to points whose normal aligns with the search normal ", {"type": "var", "text": ["N"]}, "."], "extent": [708, 851]}], "container": true}, {"type": "dt", "indent": 0, "text": ["N"], "extent": [851, 854], "body": [{"type": "para", "indent": 4, "text": ["The query normal.  Points with ", {"type": "code", "text": ["dot(N, Npoint) > cos(cone)"]}, " will be\n    queued, and unmatched points will be rejected."], "extent": [854, 978]}], "container": true}, {"type": "dt", "indent": 0, "text": ["radius"], "extent": [978, 986], "body": [{"type": "para", "indent": 4, "text": ["The maximum radius around ", {"type": "var", "text": ["P"]}, " that should be searched.  If you know\n    that all query points will reside within a given radius, you can speed\n    up the search by specifying the radius here."], "extent": [986, 1185]}], "container": true}, {"type": "dt", "indent": 0, "text": ["maxpoints"], "extent": [1185, 1196], "body": [{"type": "para", "indent": 4, "text": ["The maximum number of points that will be returned."], "extent": [1196, 1253]}], "container": true}, {"type": "dt", "indent": 0, "text": ["cone"], "extent": [1253, 1259], "body": [{"type": "para", "indent": 4, "text": ["The maximum cone angle to be used when rejecting points given a search\n    normal."], "extent": [1259, 1347]}], "container": true}, {"type": "dt", "indent": 0, "text": ["preload"], "extent": [1347, 1356], "body": [{"type": "para", "indent": 4, "text": ["A toggle to control whether the entire point cloud file is loaded into\n    memory before performing searches.  Disabling preloading will decrease\n    performance but may improve memory use."], "extent": [1356, 1551]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [1551, 1560], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["handle"], "extent": [1560, 1569], "body": [{"type": "para", "indent": 4, "text": ["The point cloud handle, to be used as input for VOPs which use the\n    point cloud such as pcfilter or pciterate."], "extent": [1569, 1688]}], "container": true}], "container": true}], "text": "Outputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [1688, 1697], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/pcfilter", "type": "link", "text": "", "fullpath": "/nodes/vop/pcfilter"}], "extent": [1697, 1720]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/pcfarthest", "type": "link", "text": "", "fullpath": "/nodes/vop/pcfarthest"}], "extent": [1720, 1744]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/pciterate", "type": "link", "text": "", "fullpath": "/nodes/vop/pciterate"}], "extent": [1744, 1767]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/pcunshaded", "type": "link", "text": "", "fullpath": "/nodes/vop/pcunshaded"}], "extent": [1767, 1791]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/pcimport", "type": "link", "text": "", "fullpath": "/nodes/vop/pcimport"}], "extent": [1791, 1813]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/pcexport", "type": "link", "text": "", "fullpath": "/nodes/vop/pcexport"}], "extent": [1813, 1835]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/pcwrite", "type": "link", "text": "", "fullpath": "/nodes/vop/pcwrite"}], "extent": [1835, 1856]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/pcopen", "type": "link", "text": "", "fallback_text": "pcopen()", "fullpath": "/vex/functions/pcopen"}], "extent": [1856, 1872]}], "container": true}], "text": "Related"}], "title": ["Point Cloud Open"], "summary": ["This node opens a point cloud file and searches for points around a source position."]}