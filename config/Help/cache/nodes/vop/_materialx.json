{"type": "root", "attrs": {"type": "node", "context": "vop", "icon": "COMMON/materialx", "index": "no", "internal": "_materialx", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["MaterialX"], "extent": [0, 14]}, {"type": "summary", "indent": 0, "text": ["MaterialX VOP nodes let you build MaterialX shaders for use with the Karma renderer."], "extent": [76, 168]}, {"type": "para", "indent": 0, "text": ["For help with individual MaterialX nodes, see the official MaterialX documentation."], "extent": [168, 253]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "https://www.materialx.org/assets/MaterialX.v1.38.Spec.pdf", "type": "link", "text": ["Specification (PDF)"], "exists": true}], "extent": [253, 335], "body": [], "container": true, "attrs": {"glyph": "fa-file-pdf-o"}}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "http://www.materialx.org/assets/MaterialX.v1.38.PBRSpec.pdf", "type": "link", "text": ["Physically Based Shading Nodes (PDF)"], "exists": true}], "extent": [362, 463], "body": [], "container": true, "attrs": {"glyph": "fa-file-pdf-o"}}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "http://www.materialx.org/assets/MaterialX.v1.38.Supplement.pdf", "type": "link", "text": ["Supplemental Notes (PDF)"], "exists": true}], "extent": [490, 582], "body": [], "container": true, "attrs": {"glyph": "fa-file-pdf-o"}}], "container": true}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [610, 619], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/solaris/materialx", "type": "link", "text": ["MaterialX in Houdini"], "fullpath": "/solaris/materialx"}], "extent": [619, 666]}], "container": true}], "text": "Related"}, {"level": 1, "id": "karma_unsupported_disney_brdf", "container": true, "type": "karma_unsupported_disney_brdf_section", "indent": 0, "role": "section", "extent": [666, 697], "body": [{"type": "warning_group", "body": [{"type": "warning", "indent": 0, "role": "item", "extent": [697, 706], "body": [{"type": "para", "indent": 4, "text": ["Not implemented by Karma. Use the ", {"scheme": "Node", "value": "/nodes/vop/principledshader", "type": "link", "text": ["Principled Shader"], "fullpath": "/nodes/vop/principledshader"}, " if you wish to use a Disney BRDF/BSDF and Karma."], "extent": [706, 841]}], "container": true}], "container": true, "role": "item_group"}], "text": "Karma_unsupported_disney_brdf"}, {"level": 1, "id": "karma_unsupported", "container": true, "type": "karma_unsupported_section", "indent": 0, "role": "section", "extent": [841, 860], "body": [{"type": "warning_group", "body": [{"type": "warning", "indent": 0, "role": "item", "extent": [860, 869], "body": [{"type": "para", "indent": 4, "text": ["Not supported by Karma."], "extent": [869, 907]}], "container": true}], "container": true, "role": "item_group"}], "text": "Karma_unsupported"}, {"level": 1, "id": "mtlx_color4_merge", "container": true, "type": "mtlx_color4_merge_section", "indent": 0, "role": "section", "extent": [907, 926], "body": [{"type": "para", "indent": 0, "text": ["MaterialX Merge nodes take two Color4 inputs and use their built-in alpha channel(s) to control how the ", {"type": "code", "text": ["fg"]}, " and ", {"type": "code", "text": ["bg"]}, " inputs are combined. These merge nodes only apply to Color4 input types. They optionally support a ", {"type": "code", "text": ["mix"]}, " input Float. This allows for blending the original ", {"type": "code", "text": ["bg"]}, " (where ", {"type": "code", "text": ["mix"]}, " is 0) with the result of the operation (where ", {"type": "code", "text": ["mix"]}, " is 1)."], "extent": [926, 1278]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Merge Operator "], "role": "th", "extent": [1278, 1296], "container": true}, {"type": "cell", "indent": 4, "text": ["RGB Result "], "role": "th", "extent": [1296, 1314], "container": true}, {"type": "cell", "indent": 8, "text": ["Alpha Result "], "role": "th", "extent": [1314, 1338]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Disjointover "], "role": "td", "extent": [1338, 1358], "container": true}, {"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["F+B"]}, " if ", {"type": "code", "text": ["f+b<=1"]}, ", and\n    ", {"type": "code", "text": ["F+B(1-f)/b"]}, " if ", {"type": "code", "text": ["f+b>1"]}, " "], "role": "td", "extent": [1358, 1415], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": [{"type": "code", "text": ["min(f+b,1)"]}], "extent": [1415, 1440]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX In "], "role": "td", "extent": [1440, 1450], "container": true}, {"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Fb"]}, " "], "role": "td", "extent": [1450, 1461], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["fb"]}], "extent": [1461, 1474]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Mask "], "role": "td", "extent": [1474, 1486], "container": true}, {"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Bf"]}, " "], "role": "td", "extent": [1486, 1497], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["bf"]}], "extent": [1497, 1510]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Matte "], "role": "td", "extent": [1510, 1523], "container": true}, {"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Ff+B(1-f)"]}, " "], "role": "td", "extent": [1523, 1541], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["f+b(1-f)"]}], "extent": [1541, 1560]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Out "], "role": "td", "extent": [1560, 1571], "container": true}, {"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["F(1-b) "]}, " "], "role": "td", "extent": [1571, 1587], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["f(1-b)"]}], "extent": [1587, 1604]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Over "], "role": "td", "extent": [1604, 1616], "container": true}, {"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["F+B(1-f)"]}, " "], "role": "td", "extent": [1616, 1633], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["f+b(1-f)"]}], "extent": [1633, 1670]}]}], "divider": false}]}], "text": "Mtlx_color4_merge"}, {"level": 1, "id": "mtlx_blends", "container": true, "type": "mtlx_blends_section", "indent": 0, "role": "section", "extent": [1670, 1683], "body": [{"type": "para", "indent": 0, "text": ["MaterialX Blend nodes take two 1-4 Channel inputs and apply the same operation to all channels. The math for Alpha is the same as for R or RGB."], "extent": [1683, 1828]}, {"type": "para", "indent": 0, "text": ["In the Blend Operator tabel, ", {"type": "q", "text": ["F"]}, " and ", {"type": "q", "text": ["B"]}, " refer to any individual channel of the ", {"type": "code", "text": ["fg"]}, " and ", {"type": "code", "text": ["bg"]}, " inputs respectively. They optionally support a ", {"type": "code", "text": ["mix"]}, " input Float. This allows for blending the original ", {"type": "code", "text": ["bg"]}, " (where ", {"type": "code", "text": ["mix"]}, " is 0) with the result of the operation (where ", {"type": "code", "text": ["mix"]}, " is 1)."], "extent": [1828, 2105]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Blend Operator "], "role": "th", "extent": [2105, 2123], "container": true}, {"type": "cell", "indent": 4, "text": ["Result per Channel "], "role": "th", "extent": [2123, 2149]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Plus "], "role": "td", "extent": [2149, 2161], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["B+F "]}], "extent": [2161, 2172]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Minus "], "role": "td", "extent": [2172, 2185], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["B-F "]}], "extent": [2185, 2196]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Difference "], "role": "td", "extent": [2196, 2214], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["abs(B-F)"]}], "extent": [2214, 2229]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Burn "], "role": "td", "extent": [2229, 2241], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["1-(1-B)/F"]}], "extent": [2241, 2257]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Dodge "], "role": "td", "extent": [2257, 2270], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["B/(1-F) "]}], "extent": [2270, 2285]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Screen "], "role": "td", "extent": [2285, 2299], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["1-(1-F)(1-B) "]}], "extent": [2299, 2319]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["MtlX Overlay "], "role": "td", "extent": [2319, 2334], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["2FB"]}, " if ", {"type": "code", "text": ["F<0.5"]}, ", and ", {"type": "code", "text": ["1-(1-F)(1-B)"]}, " if ", {"type": "code", "text": ["F>=0.5"]}], "extent": [2334, 2388]}]}], "divider": false}]}], "text": "Mtlx_blends"}], "title": ["MaterialX"], "summary": ["MaterialX VOP nodes let you build MaterialX shaders for use with the Karma renderer."]}