{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "edgetransport", "icon": "SOP/edgetransport", "since": "16.5", "verb_since": "16.5", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Edge Transport"], "extent": [117, 136]}, {"type": "summary", "indent": 0, "text": ["Copies and optionally modifies attribute values along edges networks and curves."], "extent": [136, 225]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [225, 240], "body": [{"type": "para", "indent": 0, "text": ["This node calculates attribute values as it ", {"type": "q", "text": ["moves"]}, " along curves, or along edges in polygonal geometry."], "extent": [240, 346]}, {"type": "para", "indent": 0, "text": ["The simplest form of ", {"type": "q", "text": ["transport"]}, " is to copy an attribute value from the starting points to the end points. Alternatively, you can use a function to compute the attribute value at each point in the graph. For example, you can use a sum function to compute the depth of each leaf, or a maximum function to compute the maximum value of the attribute along each branch."], "extent": [346, 713]}, {"type": "para", "indent": 0, "text": ["The node can traverse the selected edges in different ways:"], "extent": [713, 774]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["The node can treat edges with shared points as implicitly forming a directed acyclic graph and move from the root(s) of the graph along the edges to the end points."], "extent": [774, 942], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["You must specify the ", {"type": "q", "text": ["root"]}, " point(s) to start processing at. The ", {"type": "ui", "text": ["Root choice"]}, " parameter lets you use the first or last point in the geometry, or explicitly specify points to use as roots."], "extent": [942, 1140]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Houdini edges do not have an inherent direction. This node treats each edge as proceeding from the root outward. You can reverse the direction of traversal with the ", {"type": "ui", "text": ["Direction"]}, " parameter."], "extent": [1140, 1337]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["If the graph has multiple roots, the results may change if the geometry is animated, because the edge-network mode uses edge lengths to decide traversal order."], "extent": [1337, 1504]}], "container": true}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can set a ", {"type": "q", "text": ["parent"]}, " attribute on the points to explicitly set up a graph structure for the edges."], "extent": [1504, 1612]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The node can p each edge individually. This is useful for hair/fur. In this case, avoid using geometry with shared points. If you are computing a point attribute and the edge\u2019s points are shared, the resulting values are not well defined. This means the result may not make sense, and/or the result may change between runs or between versions of Houdini."], "extent": [1612, 1970]}], "container": true}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/nodes/sop/edgetransport_trees.jpg", "type": "img", "text": ""}], "extent": [1970, 2022]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Recipes"], "extent": [2022, 2036], "body": [{"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 0, "text": [" Compute distance along the curve at each point"], "role": "item", "extent": [2036, 2093], "body": [{"type": "para", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Direction"]}, " to ", {"type": "q", "text": ["Foward"]}, ", ", {"type": "ui", "text": ["Operation"]}, " to ", {"type": "q", "text": ["Total"]}, ", ", {"type": "ui", "text": ["Integrate a constant value"]}, " on, ", {"type": "ui", "text": ["Scale by edge length"]}, " on, ", {"type": "ui", "text": ["Edge split method"]}, " to ", {"type": "q", "text": ["Copy"]}, "."], "extent": [2093, 2252]}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Normalize the computed distance to a 0-1 range along the curve"], "role": "item", "extent": [2252, 2324], "body": [{"type": "para", "indent": 4, "text": ["First, use an Edge Transport to compute the distance.\n    Then, use an Attribute Wrangle to set each point\u2019s distance value to the current value divided by the value on the last point."], "extent": [2324, 2514]}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Compute the number of edges along the curve at each point"], "role": "item", "extent": [2514, 2581], "body": [{"type": "para", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Direction"]}, " to ", {"type": "q", "text": ["Foward"]}, ", ", {"type": "ui", "text": ["Operation"]}, " to ", {"type": "q", "text": ["Total"]}, ", ", {"type": "ui", "text": ["Integrate a constant value"]}, " on, ", {"type": "ui", "text": ["Scale by edge length"]}, " off, ", {"type": "ui", "text": ["Edge split method"]}, " to ", {"type": "q", "text": ["Copy"]}, "."], "extent": [2581, 2742]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [2742, 2754], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Method"], "extent": [2754, 2763], "body": [{"type": "para", "indent": 4, "text": ["How to traverse the edges between the points in the ", {"type": "ui", "text": ["Point group"]}, "."], "extent": [2784, 2862]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Each Curve"], "extent": [2862, 2878], "body": [{"type": "para", "indent": 8, "text": ["Processes each curve individually. The ", {"type": "q", "text": ["forward"]}, " direction of each curve is from the lowest point number to the highest point number. This mode supports both vertex and point attributes. This mode only supports polygons and curves. This mode works with closed curves."], "extent": [2878, 3163]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Edge Network"], "extent": [3163, 3181], "body": [{"type": "para", "indent": 8, "text": ["The node forms a graph structure from any edges between the points in the ", {"type": "ui", "text": ["Point group"]}, ". You can set the starting points (roots) using the ", {"type": "ui", "text": ["Root choice"]}, " parameter. The node works from the root points outward. Edges at the same level are traversed by edge distance. This mode only supports point attributes. You can use this mode with any geometry type with internal edges."], "extent": [3181, 3567]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Parent Attribute"], "extent": [3567, 3589], "body": [{"type": "para", "indent": 8, "text": ["This lets you explicitly set up the graph structure of the points using an attribute. Create an integer attribute named ", {"type": "code", "text": ["parent"]}, " on the points (you can change the attribute name with the ", {"type": "ui", "text": ["Parent attribute"]}, " parameter). Set the value of this attribute on each point specifies the point number of that point\u2019s ", {"type": "em", "text": ["parent"]}, " point. This mode does not require actual edges to exist between the points."], "extent": [3589, 4000]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/sop/edgetransport_parent_network.svg", "type": "img", "text": ""}], "extent": [4000, 4076]}, {"type": "para", "indent": 8, "text": ["To create a parent attribute from the edge topology (like how ", {"type": "q", "text": ["Edge Network"]}, " mode works), do the following:"], "extent": [4076, 4201]}, {"type": "ord_group", "body": [{"blevel": 10, "type": "ord", "indent": 8, "text": ["Use an ", {"scheme": "Node", "value": "/nodes/sop/enumerate", "type": "link", "text": ["Enumerate SOP"], "fullpath": "/nodes/sop/enumerate"}, " to set the ", {"type": "code", "text": ["parent"]}, " attribute on each point to that point\u2019s number."], "extent": [4201, 4330]}, {"blevel": 10, "type": "ord", "indent": 8, "text": ["Use an Edge Transport node with ", {"type": "ui", "text": ["Method"]}, " set to ", {"type": "q", "text": ["Edge Network"]}, ", ", {"type": "ui", "text": ["Operation"]}, " set to ", {"type": "q", "text": ["Transport"]}, ", and ", {"type": "ui", "text": ["New root value"]}, " set to ", {"type": "q", "text": ["Hold"]}, "."], "extent": [4330, 4479]}], "container": true}], "container": true}], "container": true}], "container": true, "attrs": {"id": "method"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Curve Group"], "extent": [4479, 4492], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Method"]}, " is ", {"type": "q", "text": ["Each Curve"]}, ", only transport values along the curves in this primitive group. If this is blank, the node operates on all points."], "extent": [4512, 4665]}], "container": true, "attrs": {"id": "primgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Point Group"], "extent": [4665, 4678], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Method"]}, " is ", {"type": "q", "text": ["Edge Network"]}, " or ", {"type": "q", "text": ["Parent Attribute"]}, ", only transport values between points in this group. If this is blank, the node operates on all points."], "extent": [4696, 4861]}], "container": true, "attrs": {"id": "ptgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attribute"], "extent": [4861, 4872], "body": [{"type": "para", "indent": 4, "text": ["Transport the values of this attribute. When ", {"type": "ui", "text": ["Method"]}, " is ", {"type": "q", "text": ["Each Curve"]}, ", this can be a point or vertex attribute. When ", {"type": "ui", "text": ["Method"]}, " is ", {"type": "q", "text": ["Edge Network"]}, " or ", {"type": "q", "text": ["Parent Attribute"]}, ", this must be a point attribute."], "extent": [4896, 5104]}, {"type": "para", "indent": 4, "text": ["If this attribute does not exist, and ", {"type": "ui", "text": ["Integrate a Constant Value"]}, " is on, the attribute is created. Otherwise, if the attribute does not exist the node does nothing."], "extent": [5104, 5277]}], "container": true, "attrs": {"id": "attribute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direction"], "extent": [5277, 5288], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Forward"], "extent": [5311, 5324], "body": [{"type": "para", "indent": 12, "text": ["Process from the root points outward to the tip points (or from the start of each curve to the end)."], "extent": [5324, 5446]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Backward"], "extent": [5446, 5460], "body": [{"type": "para", "indent": 12, "text": ["Process from the tip points inward to the root points (or from the end of each curve to the start)."], "extent": [5460, 5573]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "curvedir"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Parent Attribute"], "extent": [5573, 5591], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Method"]}, " is ", {"type": "q", "text": ["Parent Attribute"]}, ", the node looks in this attribute to set up a directed acyclic graph from the points. The default is ", {"type": "code", "text": ["parent"]}, ". The node treats points with invalid point numbers and their own point numbers in this attribute as roots. The node ignores any points not reachable from a root."], "extent": [5591, 5906]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Root Choice"], "extent": [5906, 5919], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Method"]}, " is ", {"type": "q", "text": ["Edge Network"]}, ", this controls which point(s) to start from."], "extent": [5942, 6030]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["First Point"], "extent": [6030, 6047], "body": [{"type": "para", "indent": 12, "text": ["Start from the point with the smallest point number. If after all points reachable from this root are processed there are still unprocessed points, the unprocessed point with the smallest point number is made a new root and the process repeats."], "extent": [6047, 6313]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Last Point"], "extent": [6313, 6329], "body": [{"type": "para", "indent": 12, "text": ["Like ", {"type": "q", "text": ["First Point"]}, " but starts from the point with the highest point number."], "extent": [6329, 6426]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Group"], "extent": [6426, 6437], "body": [{"type": "para", "indent": 8, "text": ["Start from the point(s) in the ", {"type": "ui", "text": ["Root group"]}, ". If a point is reachable from multiple roots, whichever has the shortest path will apply the transport function for that point. Any points unreachable from these roots ", {"type": "em", "text": ["are not processed"]}, "."], "extent": [6437, 6681]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "roottype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Root Group"], "extent": [6681, 6693], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Root choice"]}, " is ", {"type": "q", "text": ["Group"]}, ", a group of points to use as roots for the edge network."], "extent": [6713, 6807]}], "container": true, "attrs": {"id": "rootgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Operation"], "extent": [6807, 6818], "body": [{"type": "para", "indent": 4, "text": ["How the node sets the attribute values as it moves along the curves/edges."], "extent": [6842, 6926]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Transport"], "extent": [6926, 6941], "body": [{"type": "para", "indent": 8, "text": ["Copy the value from the previous/parent point. If the point is a root, it uses the ", {"type": "ui", "text": ["New root value"]}, " parameter to choose the new value."], "extent": [6941, 7087]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Transport from Root"], "extent": [7087, 7112], "body": [{"type": "para", "indent": 12, "text": ["Copy the value from the root. If the point is a root, it uses the ", {"type": "ui", "text": ["New root value"]}, " parameter to choose the new value."], "extent": [7112, 7245]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Total"], "extent": [7245, 7256], "body": [{"type": "para", "indent": 8, "text": ["Set the value to the sum of all the values of previous/ancestor points. This operation is useful for measuring the ", {"type": "em", "text": ["distance"]}, " from the root to each point, or counting the ", {"type": "em", "text": ["number of points"]}, " from the root to each point."], "extent": [7256, 7492]}, {"type": "para", "indent": 8, "text": ["To measure distance, turn on ", {"type": "ui", "text": ["Scale by edge length"]}, ". This scales each added value by the distance to the previous point, making the value of each point varying by the outgoing edge length."], "extent": [7492, 7700]}, {"type": "para", "indent": 8, "text": ["When measuring distance or number of points, turn on ", {"type": "ui", "text": ["Integrate a Constant Value"]}, ". This treats each point\u2019s current value as ", {"type": "code", "text": ["1"]}, "."], "extent": [7700, 7841]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Note"], "extent": [7841, 7855], "body": [{"type": "para", "indent": 13, "text": ["Each point receives the total of the attribute value of all\n             the previous points up to, and not including, itself.  Thus\n             root values receive zero."], "extent": [7855, 8041]}], "container": true}], "container": true}], "container": true}, {"type": "dt", "indent": 4, "text": ["Maximum"], "extent": [8041, 8054], "body": [{"type": "para", "indent": 8, "text": ["Set the value to the maximum of this point\u2019s value and all previous/ancestor values. If the point is a root, it just uses its current value."], "extent": [8054, 8212]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Minimum"], "extent": [8212, 8225], "body": [{"type": "para", "indent": 12, "text": ["Like ", {"type": "q", "text": ["Maximum"]}, ", takes the minimum."], "extent": [8225, 8273]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "operation"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["New Root Value"], "extent": [8273, 8289], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Operation"]}, " is ", {"type": "q", "text": ["Transport"]}, ", this controls what values to use for the roots."], "extent": [8289, 8377]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Zero"], "extent": [8377, 8387], "body": [{"type": "para", "indent": 12, "text": ["Treat the value of root points as ", {"type": "code", "text": ["0"]}, "."], "extent": [8387, 8447]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Hold"], "extent": [8447, 8457], "body": [{"type": "para", "indent": 12, "text": ["Use the root point\u2019s current value."], "extent": [8457, 8506]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Integrate a Constant Value"], "extent": [8506, 8534], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Operation"]}, " is ", {"type": "q", "text": ["Total"]}, ", treat each point\u2019s current value as ", {"type": "code", "text": ["1"]}, ". This lets you measure distance or number of points along the edges."], "extent": [8560, 8705]}], "container": true, "attrs": {"id": "ignoreattribute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Scale by Edge Length"], "extent": [8705, 8727], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Operation"]}, " is ", {"type": "q", "text": ["Total"]}, ", scale the value transported along an edge by the edge length. This lets you measure distance along the edges."], "extent": [8749, 8895]}], "container": true, "attrs": {"id": "scalebyedge"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Edge Split Method"], "extent": [8895, 8914], "body": [{"type": "para", "indent": 4, "text": ["When processing a graph structure with ", {"type": "ui", "text": ["Direction"]}, " set to ", {"type": "q", "text": ["Forward"]}, ", a point can have more than one outgoing edge. This controls how to pass the current point\u2019s value down to multiple ", {"type": "q", "text": ["child"]}, " points."], "extent": [8914, 9121]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Copy"], "extent": [9121, 9131], "body": [{"type": "para", "indent": 12, "text": ["Transport the current value to each child point."], "extent": [9131, 9201]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Split"], "extent": [9201, 9212], "body": [{"type": "para", "indent": 12, "text": ["Divide the current value by the number of children and pass the result to each child point."], "extent": [9212, 9317]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Edge Merge Method"], "extent": [9317, 9336], "body": [{"type": "para", "indent": 4, "text": ["When processing a graph structure with ", {"type": "ui", "text": ["Direction"]}, " set to ", {"type": "q", "text": ["Reverse"]}, ", a point can have more than one incoming edge. This controls how to merge the values coming up from multiple ", {"type": "q", "text": ["child"]}, " points."], "extent": [9336, 9536]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Add"], "extent": [9536, 9545], "body": [{"type": "para", "indent": 12, "text": ["Use the sum of the child values."], "extent": [9545, 9599]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Maximum"], "extent": [9599, 9612], "body": [{"type": "para", "indent": 12, "text": ["Use the highest of the child values."], "extent": [9612, 9670]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Minimum"], "extent": [9670, 9683], "body": [{"type": "para", "indent": 12, "text": ["Use the lowest of the child values."], "extent": [9683, 9733]}], "container": true}], "container": true}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [9733, 9742], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Nodes", "value": "sop/measure", "type": "link", "text": "", "fullpath": "/nodes/sop/sop/measure"}], "extent": [9742, 9765]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Nodes", "value": "sop/ends", "type": "link", "text": "", "fullpath": "/nodes/sop/sop/ends"}], "extent": [9765, 9790]}], "container": true}], "text": "Related"}], "title": ["Edge Transport"], "summary": ["Copies and optionally modifies attribute values along edges networks and curves."]}