{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "volumeadjustfog", "icon": "SOP/volumeadjustfog", "since": "19", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Volume Adjust Fog"], "extent": [92, 114]}, {"type": "summary", "indent": 0, "text": ["Modifies values on the incoming Volume and VDB primitives."], "extent": [114, 181]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [181, 196], "body": [{"type": "para", "indent": 0, "text": ["The Volume Adjust Fog SOP provides an interface to voxel attribute values, reducing the need to create VOP networks or write VEX code. It allows modification by a uniform value or a varying value for each voxel. The varying values can be generated fully randomly or sampled from a spatially-coherent noise pattern."], "extent": [196, 513]}, {"type": "para", "indent": 0, "text": ["This node can also pre-process and post-process values, giving the user additional controls to final the primitive values as desired."], "extent": [513, 648]}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [648, 660], "body": [{"level": 2, "type": "sep", "indent": 0, "text": [" General "], "extent": [660, 675], "body": [], "container": true, "attrs": {"id": "linkgeneral"}}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Blend"], "extent": [697, 704], "body": [{"type": "para", "indent": 4, "text": ["Blends between the incoming volume and the adjusted volume values. A blend of ", {"type": "code", "text": ["0"]}, " means that no adjustment takes place: the incoming volume values is the output value. Likewise, a value of ", {"type": "code", "text": ["1"]}, " will output the adjusted value, ignoring the initial value. Blending can be done either by uniform value ", {"type": "ui", "text": ["Constant"]}, " or by value of the ", {"type": "ui", "text": ["Blend Volume"]}, " (when the menu on the right of this parameter is set to ", {"type": "ui", "text": ["Use Volume"]}, ")."], "extent": [725, 1150]}], "container": true, "attrs": {"id": "blendweight"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Volume"], "extent": [1150, 1162], "body": [{"type": "para", "indent": 4, "text": ["Specifies the volume primitive to use as a mask to blend values between the incoming volume and the adjusted value."], "extent": [1180, 1303]}], "container": true, "attrs": {"id": "blendvol"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Volume Name"], "extent": [1303, 1316], "body": [{"type": "para", "indent": 4, "text": ["The name of the volume primitive to modify."], "extent": [1329, 1378]}], "container": true, "attrs": {"id": "vol"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Pre-Process "], "extent": [1378, 1398]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Enable Pre-Process"], "extent": [1398, 1419], "body": [{"type": "para", "indent": 4, "text": ["Enables a set of controls to fine tune the incoming values. All pre-process modifications will take place before adjustment is applied to the attribute."], "extent": [1446, 1608]}], "container": true, "attrs": {"id": "enable_preprocess"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Overwrite Initial Value"], "extent": [1608, 1633], "body": [{"type": "para", "indent": 4, "text": ["Sets the value for the primitive. Use to override values with a single float value or from another volume primitive."], "extent": [1654, 1776]}], "container": true, "attrs": {"id": "doinitvalue"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Initial Value From"], "extent": [1776, 1796], "body": [{"type": "para", "indent": 4, "text": ["Set where the value is acquired from\n    Constant Value"], "extent": [1819, 1879], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Initial Value"], "extent": [1879, 1902], "body": [{"type": "para", "indent": 12, "text": ["Sets a constant Value on the volume."], "extent": [1929, 1978]}], "container": true, "attrs": {"id": "initvalue"}}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Volume"], "extent": [1978, 1989], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Volume Name"], "extent": [1989, 2010], "body": [{"type": "para", "indent": 12, "text": ["Name of the volume/VDB primitive to copy values from."], "extent": [2035, 2102]}], "container": true, "attrs": {"id": "initvol"}}], "container": true}], "container": true}], "container": true, "attrs": {"id": "initvaluefrom"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Complement Volume"], "extent": [2102, 2121], "body": [{"type": "para", "indent": 4, "text": ["Computes the complement of values in the volume and assigns them to the primitive."], "extent": [2148, 2237]}], "container": true, "attrs": {"id": "initcomplementary"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "type": "sep", "indent": 0, "text": [" Adjustment Value "], "extent": [2237, 2260], "body": [], "container": true, "attrs": {"id": "linkadjustmentvalue"}}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Adjust Value"], "extent": [2290, 2305], "body": [{"type": "para", "indent": 4, "text": ["Generates a value that will be combined with the incoming volume."], "extent": [2326, 2397]}], "container": true, "attrs": {"id": "adjustvalue"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Operation"], "extent": [2397, 2408], "body": [{"type": "para", "indent": 4, "text": ["Specifies how to combine the generated adjustment value with the incoming volume. If the target primitive does not exist on the input geometry, all operations will have the same effect."], "extent": [2427, 2626]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Set Always"], "extent": [2626, 2642], "body": [{"type": "para", "indent": 8, "text": ["Use this operation if you want to overwrite any existing value with the generated adjustment value."], "extent": [2642, 2751]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Add"], "extent": [2751, 2760], "body": [{"type": "para", "indent": 8, "text": ["The generated adjustment value will be added to the existing volume primitive."], "extent": [2760, 2848]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Subtract"], "extent": [2848, 2862], "body": [{"type": "para", "indent": 8, "text": ["The generated adjustment value will be subtracted from the existing volume primitive."], "extent": [2862, 2957]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Multiply"], "extent": [2957, 2971], "body": [{"type": "para", "indent": 8, "text": ["The existing volume primitive value will be multiplied by the generated adjustment value."], "extent": [2971, 3070]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Minimum"], "extent": [3070, 3083], "body": [{"type": "para", "indent": 8, "text": ["Output will be minimum of the existing volume primitive value and the adjustment value."], "extent": [3083, 3188]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Maximum"], "extent": [3188, 3201], "body": [{"type": "para", "indent": 8, "text": ["Output will be maximum of the existing volume primitive value and the adjustment value."], "extent": [3201, 3298]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "operation"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pattern Type"], "extent": [3298, 3312], "body": [{"type": "para", "indent": 4, "text": ["Specifies how the adjustment value is generated. ", {"type": "ui", "text": ["Constant Value"]}, " will use the same ", {"type": "ui", "text": ["Value"]}, " for every voxel. ", {"type": "ui", "text": ["Random"]}, " and ", {"type": "ui", "text": ["Noise"]}, " will generate varying values across each voxel of the volume primitive, in which case varying values will be inside a well defined range or selected from a list of specific values. Additionally, you can provide another volume primitive to use as the adjustment value for every voxel."], "extent": [3331, 3758]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Constant"], "extent": [3758, 3772], "body": [{"type": "para", "indent": 8, "text": ["The adjustment value will be the same for all voxels in the volume primitive. Use this to do simple math operations for all voxels. For example, to offset all voxel values."], "extent": [3772, 3954]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Random"], "extent": [3954, 3966], "body": [{"type": "para", "indent": 8, "text": ["The adjustment values will be sampled fully randomly. Adjustment values can be inside a well defined range or selected from a list of specific values."], "extent": [3966, 4126]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Noise"], "extent": [4126, 4137], "body": [{"type": "para", "indent": 8, "text": ["The adjustment values will be sampled based on a coherent noise field using the ", {"scheme": "Node", "value": "/nodes/sop/volumenoisefog", "type": "link", "text": ["Volume Noise Fog SOP"], "fullpath": "/nodes/sop/volumenoisefog"}, ". Adjustment values can be inside a well defined range or selected from a list of specific values."], "extent": [4137, 4371]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Fog Volume"], "extent": [4371, 4387], "body": [{"type": "para", "indent": 8, "text": ["Values of the volume primitive specified in ", {"type": "ui", "text": ["Adjustment Volume"]}, " will be used as the adjustment value."], "extent": [4387, 4500]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Remap Volume"], "extent": [4500, 4518], "body": [{"type": "para", "indent": 8, "text": ["The adjustment values will be sampled based on the volume specified by ", {"type": "ui", "text": ["Source Volume"]}, "."], "extent": [4518, 4617]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Line"], "extent": [4617, 4627], "body": [{"type": "para", "indent": 8, "text": ["Lets you click and drag across your viewport to add a gradient of values along the bound of the volume primitive. "], "extent": [4627, 4759]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Radial"], "extent": [4759, 4771], "body": [{"type": "para", "indent": 8, "text": ["Lets you click and drag across your geometry to add a gradient of values radially based on the drawn circle. You can also do this with ", {"type": "ui", "text": ["Specific Values"]}, " if you want clearly defined values with no blending."], "extent": [4771, 4996]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Bounding Box"], "extent": [4996, 5014], "body": [{"type": "para", "indent": 8, "text": ["The adjustment values will be based on the relative location of each element within the input\u2019s bounding box. This is useful if you don\u2019t know the size of your volumes, as it places a bounding box around your whole object and modifies values within the box. For example, you can create a gradient from the lowest point to the highest point of an irregular shaped object, and even if the object rotates or transforms, it will still keep the same gradient within the bounding box."], "extent": [5014, 5510]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "valuetype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Range Values"], "extent": [5510, 5524], "body": [{"type": "para", "indent": 4, "text": ["The adjustment value will be generated in the selected range. This parameter governs how this range is specified. You can also provide a list of specific values or multiple ranges by selecting ", {"type": "ui", "text": ["Specific Values"]}, ", which can be useful to create values representing specific trigger frames."], "extent": [5545, 5839]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Positive"], "extent": [5839, 5853], "body": [{"type": "para", "indent": 8, "text": ["From 0 to the ", {"type": "ui", "text": ["Amplitude"]}, " value."], "extent": [5853, 5897]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Negative"], "extent": [5897, 5911], "body": [{"type": "para", "indent": 8, "text": ["From negative ", {"type": "ui", "text": ["Amplitude"]}, " to 0 value."], "extent": [5911, 5960]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Zero Centered"], "extent": [5960, 5979], "body": [{"type": "para", "indent": 8, "text": ["From negative ", {"type": "ui", "text": ["Amplitude"]}, " to positive ", {"type": "ui", "text": ["Amplitude"]}, "."], "extent": [5979, 6043]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Min/Max"], "extent": [6043, 6064], "body": [{"type": "para", "indent": 8, "text": ["The range contains all values between ", {"type": "ui", "text": ["Min Value"]}, " and ", {"type": "ui", "text": ["Max Value"]}, "."], "extent": [6064, 6144]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["Min Value "], "role": "th", "extent": [6144, 6165], "container": true}, {"type": "cell", "indent": 12, "text": ["Max Value "], "role": "th", "extent": [6165, 6191], "container": true}, {"type": "cell", "indent": 16, "text": ["Custom Range "], "role": "th", "extent": [6191, 6224]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["0 "], "role": "td", "extent": [6224, 6248], "container": true}, {"type": "cell", "indent": 12, "text": ["1 "], "role": "td", "extent": [6248, 6264], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["0 to 1"], "extent": [6264, 6287]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["5 "], "role": "td", "extent": [6287, 6311], "container": true}, {"type": "cell", "indent": 12, "text": ["10 "], "role": "td", "extent": [6311, 6328], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["5 to 10"], "extent": [6328, 6352]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["-5 "], "role": "td", "extent": [6352, 6377], "container": true}, {"type": "cell", "indent": 12, "text": ["7 "], "role": "td", "extent": [6377, 6393], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["-5 to 7"], "extent": [6393, 6418]}]}], "divider": false}]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Min + Range Length"], "extent": [6418, 6442], "body": [{"type": "para", "indent": 8, "text": ["The range contains all values between ", {"type": "ui", "text": ["Min Value"]}, " and ", {"type": "ui", "text": ["Min Value + Range Length"]}, ". For instance, if ", {"type": "ui", "text": ["Min Value"]}, " is ", {"type": "code", "text": ["2"]}, " and ", {"type": "ui", "text": ["Range Length"]}, " is ", {"type": "code", "text": ["5"]}, ", the minimum and maximum limits of the range will be ", {"type": "code", "text": ["2"]}, " and ", {"type": "code", "text": ["7"]}, ", respectively."], "extent": [6442, 6683]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["Min Value "], "role": "th", "extent": [6683, 6704], "container": true}, {"type": "cell", "indent": 12, "text": ["Range Length "], "role": "th", "extent": [6704, 6733], "container": true}, {"type": "cell", "indent": 16, "text": ["Custom Range "], "role": "th", "extent": [6733, 6766]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["0 "], "role": "td", "extent": [6766, 6790], "container": true}, {"type": "cell", "indent": 12, "text": ["1 "], "role": "td", "extent": [6790, 6806], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["0 to 1"], "extent": [6806, 6829]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["5 "], "role": "td", "extent": [6829, 6853], "container": true}, {"type": "cell", "indent": 12, "text": ["10 "], "role": "td", "extent": [6853, 6870], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["5 to 15"], "extent": [6870, 6894]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["-5 "], "role": "td", "extent": [6894, 6919], "container": true}, {"type": "cell", "indent": 12, "text": ["7 "], "role": "td", "extent": [6919, 6935], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["-5 to 2"], "extent": [6935, 6960]}]}], "divider": false}]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Middle \u00b1 Range Length"], "extent": [6960, 6987], "body": [{"type": "para", "indent": 8, "text": ["The range contains all values between ", {"type": "ui", "text": ["Middle Value - Range Length / 2"]}, " and ", {"type": "ui", "text": ["Middle Value + Range Length / 2"]}, ". For instance, if ", {"type": "ui", "text": ["Middle Value"]}, " is ", {"type": "code", "text": ["8"]}, " and ", {"type": "ui", "text": ["Range Length"]}, " is ", {"type": "code", "text": ["4"]}, ", the minimum and maximum limits of the range will be ", {"type": "code", "text": ["6"]}, " and ", {"type": "code", "text": ["10"]}, ", respectively."], "extent": [6987, 7269]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["Middle Value "], "role": "th", "extent": [7269, 7293], "container": true}, {"type": "cell", "indent": 12, "text": ["Range Length "], "role": "th", "extent": [7293, 7322], "container": true}, {"type": "cell", "indent": 16, "text": ["Custom Range "], "role": "th", "extent": [7322, 7355]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["0 "], "role": "td", "extent": [7355, 7379], "container": true}, {"type": "cell", "indent": 12, "text": ["1 "], "role": "td", "extent": [7379, 7395], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["-0.5 to 0.5"], "extent": [7395, 7423]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["5 "], "role": "td", "extent": [7423, 7447], "container": true}, {"type": "cell", "indent": 12, "text": ["10 "], "role": "td", "extent": [7447, 7464], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["0 to 10"], "extent": [7464, 7488]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["-5 "], "role": "td", "extent": [7488, 7513], "container": true}, {"type": "cell", "indent": 12, "text": ["7 "], "role": "td", "extent": [7513, 7529], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["-8.5 to 1.5"], "extent": [7529, 7558]}]}], "divider": false}]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Specific Values"], "extent": [7558, 7579], "body": [{"type": "para", "indent": 8, "text": ["The adjustment value will be one of the discrete listed values. The probability of selecting each value is proportional to its ", {"type": "ui", "text": ["Weight"]}, ". ", {"type": "ui", "text": ["Pattern Type"]}, " controls how the adjustment value is sampled for each voxel."], "extent": [7579, 7805]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Step Size"], "extent": [7805, 7820], "body": [{"type": "para", "indent": 8, "text": ["Controls the spacing between the generated adjustment values."], "extent": [7820, 7895]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Enable Remap Ramp"], "extent": [7895, 7918], "body": [{"type": "para", "indent": 8, "text": ["Turn this on to shape the adjustment values with a ramp."], "extent": [7947, 8017]}], "container": true, "attrs": {"id": "enableremapramp"}}, {"type": "dt", "indent": 4, "text": ["Remap Ramp"], "extent": [8017, 8033], "body": [{"type": "para", "indent": 8, "text": ["When Enable Remap Ramp is on, this ramp lets you control the output adjustment values. The horizontal axis represents the range (minimum on the left, maximum on the right). The vertical axis represents the number to output when the noise function generates that point within the range."], "extent": [8056, 8351]}, {"type": "para", "indent": 8, "text": ["The default ramp (diagonal from bottom-left to top-right) outputs each number \u201cas itself\u201d."], "extent": [8351, 8451]}], "container": true, "attrs": {"id": "remapramp"}}], "container": true}], "container": true, "attrs": {"id": "rangemethod"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Adjustment Volume"], "extent": [8451, 8469], "body": [{"type": "para", "indent": 4, "text": ["Specifies the volume primitive which contains the adjustment value to use. The reference values can be pre-scaled (", {"type": "ui", "text": ["Scale Value"]}, "), pre-offset (", {"type": "ui", "text": ["Offset Value"]}, ") or both (", {"type": "ui", "text": ["Apply Both"]}, ") before it is combined with the incoming volume primitive."], "extent": [8492, 8743]}], "container": true, "attrs": {"id": "adjustmentvol"}}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Scale"], "extent": [8743, 8751], "body": [{"type": "para", "indent": 4, "text": ["Scales the adjustment value before it is combined with the incoming voxel values."], "extent": [8782, 8869]}], "container": true, "attrs": {"id": "adjustmentattribscale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Offset"], "extent": [8869, 8878], "body": [{"type": "para", "indent": 4, "text": ["Offsets the adjustment value before it is combined with the incoming voxel value."], "extent": [8910, 8997]}], "container": true, "attrs": {"id": "adjustmentattriboffset"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "type": "sep", "indent": 0, "text": [" Random "], "extent": [8997, 9010], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Randomization By"], "extent": [9031, 9053], "body": [{"type": "para", "indent": 8, "text": ["Specifies how the pseudo-random number generator is seeded for each voxel to produce the adjustment value. "], "extent": [9077, 9194]}], "container": true, "attrs": {"id": "randmethod"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Seed"], "extent": [9194, 9204], "body": [{"type": "para", "indent": 8, "text": ["All generated values depend randomly on this value. Choose a different value if the current seed produces undesirable samples. "], "extent": [9237, 9374]}], "container": true, "attrs": {"id": "randomseed    "}, "role": "item"}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "linkrandom"}}, {"level": 2, "type": "sep", "indent": 0, "text": [" Noise Pattern "], "extent": [9374, 9394], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Noise type"], "extent": [3092, 3104], "body": [{"type": "para", "indent": 4, "text": ["The type of noise to generate. Different algorithms give noise with different characteristics."], "extent": [3119, 3223]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Fast"], "extent": [3223, 3233], "body": [{"type": "para", "indent": 8, "text": ["The default. A faster and more interesting variant of Perlin noise."], "extent": [3233, 3314]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_simplex.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/vop/unoise_simplex.jpg"}], "extent": [3314, 3368]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Sparse Convolution"], "extent": [3368, 3392], "body": [{"type": "para", "indent": 8, "text": ["Sparse Convolution noise is similar to Worley noise. Does not have artifacts at grid points."], "extent": [3392, 3498]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_sparse.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/vop/unoise_sparse.jpg"}], "extent": [3498, 3551]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Alligator"], "extent": [3551, 3566], "body": [{"type": "para", "indent": 8, "text": ["Produces a bumpy output. Named for its alleged resemblance to alligator skin."], "extent": [3566, 3657]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_alligator.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/vop/unoise_alligator.jpg"}], "extent": [3657, 3717]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Perlin"], "extent": [3717, 3729], "body": [{"type": "para", "indent": 8, "text": ["A noise where the visual details are the same size. ", {"scheme": "Wp", "value": "http://en.wikipedia.org/wiki/Perlin_noise", "type": "link", "text": ["Wikipedia article"], "exists": true}], "extent": [3729, 3830]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_perlin.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/vop/unoise_perlin.jpg"}, "\n        ", {"scheme": "Image", "value": "/images/nodes/vop/unoise_periodic_perlin.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/vop/unoise_periodic_perlin.jpg"}], "extent": [3830, 3944]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Perlin Flow"], "extent": [3944, 3961], "body": [{"type": "para", "indent": 8, "text": ["A noise that\u2019s stable over time, like a rotated Perlin noise, useful to create noise that seems to swirl and flow smoothly across time. Use the ", {"type": "ui", "text": ["Flow rotation"]}, " parameter below to control the rotation."], "extent": [3961, 4177]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 8, "role": "item", "extent": [4177, 4201], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_flow.mp4"}}, {"ext": null, "type": "video", "indent": 8, "role": "item", "extent": [4248, 4264], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_periodic_flow.mp4"}}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 4, "text": ["Simplex"], "extent": [4324, 4337], "body": [{"type": "para", "indent": 8, "text": ["A noise similar to Perlin but the noise lattice is on a tetrahedral mesh rather than a grid.  This can avoid the grid patterns often visible in Perlin noise."], "extent": [4337, 4504]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Worley Cellular F1"], "extent": [4504, 4528], "body": [{"type": "para", "indent": 8, "text": ["Produces cellular features similar to plant cells, ocean waves, honeycombs, cratered landscapes, and so on. ", {"scheme": "Wp", "value": "http://en.wikipedia.org/wiki/Worley_noise", "type": "link", "text": ["Wikipedia article"], "exists": true}], "extent": [4528, 4685]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_worley_f1.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/vop/unoise_worley_f1.jpg"}], "extent": [4685, 4745]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Worley Cellular F2-F1"], "extent": [4745, 4772], "body": [{"type": "para", "indent": 8, "text": ["A variant of Worley noise that produces blunted and cornered features."], "extent": [4772, 4856]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_worley_f2.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/vop/unoise_worley_f2.jpg"}], "extent": [4856, 4916]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Manhattan Cellular F1"], "extent": [4916, 4943], "body": [{"type": "para", "indent": 8, "text": ["A variant of Worley F1 noise that uses Manhattan distance calculation. Useful when you want unusual-looking noise."], "extent": [4943, 5071]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Manhattan Cellular F2-F1"], "extent": [5071, 5101], "body": [{"type": "para", "indent": 8, "text": ["A variant of Worley F2-F1 noise that uses Manhattan distance calculation. Useful when you want unusual-looking noise."], "extent": [5101, 5232]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Chebyshev Cellular F1"], "extent": [5232, 5259], "body": [{"type": "para", "indent": 8, "text": ["A variant of Worley F1 noise that uses Chebyshev distance calculation. Useful when you want unusual-looking noise."], "extent": [5259, 5387]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Chebyshev Cellular F2-F1"], "extent": [5387, 5417], "body": [{"type": "para", "indent": 8, "text": ["A variant of Worley F2-F1 noise that uses Chebyshev distance calculation. Useful when you want unusual-looking noise."], "extent": [5417, 5544]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "basis"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Element Size"], "extent": [11289, 11303], "body": [{"type": "para", "indent": 4, "text": ["Uniform scale of elements in the noise."], "extent": [11325, 11370]}, {"type": "para", "indent": 4, "text": ["Click the ", {"scheme": "Smallicon", "value": "BUTTONS/decompose_transforms", "type": "link", "text": "", "fullpath": "/nodes/sop/BUTTONS/decompose_transforms"}, " Per Component button for separate scales along each axis."], "extent": [11370, 11484]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 4, "role": "item", "extent": [11484, 11496], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_frequency.mp4"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "elementsize"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Element Scale"], "extent": [11545, 11560], "body": [{"type": "para", "indent": 4, "text": ["When you turn on the ", {"scheme": "Smallicon", "value": "BUTTONS/decompose_transforms", "type": "link", "text": "", "fullpath": "/nodes/sop/BUTTONS/decompose_transforms"}, " Per Component button, this lets you scale the ", {"type": "ui", "text": ["Element Size"]}, " separately across each axis."], "extent": [11587, 11746]}], "container": true, "attrs": {"id": "elementscale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Offset"], "extent": [11746, 11754], "body": [{"type": "para", "indent": 4, "text": ["Offset within the evaluated noise field (added to each axis). If you have the general noise effect you want, but want to get a different set of values for a different look, try changing the offset."], "extent": [11771, 11974]}, {"type": "para", "indent": 4, "text": ["You can animate the noise using an expression such as ", {"type": "code", "text": ["$T * 0.25"]}, " here. This is faster to compute than ", {"type": "ui", "text": ["Animate Noise"]}, ", but gives the visual effect of ", {"type": "q", "text": ["panning"]}, " across the noise field, which may or may not be acceptable."], "extent": [11974, 12202]}, {"type": "para", "indent": 4, "text": ["Click the ", {"scheme": "Smallicon", "value": "BUTTONS/decompose_transforms", "type": "link", "text": "", "fullpath": "/nodes/sop/BUTTONS/decompose_transforms"}, " Per Component button for separate additional offsets along each axis."], "extent": [12202, 12332]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 4, "role": "item", "extent": [12332, 12344], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_offset.mp4"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "offset"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Offset"], "extent": [12392, 12400], "body": [{"type": "para", "indent": 4, "text": ["When you turn on the ", {"scheme": "Smallicon", "value": "BUTTONS/decompose_transforms", "type": "link", "text": "", "fullpath": "/nodes/sop/BUTTONS/decompose_transforms"}, " Per Component button, this lets you add the a separate offset along each axis."], "extent": [12422, 12568]}], "container": true, "attrs": {"id": "offsetv"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use VEXpression"], "extent": [12568, 12585], "body": [{"type": "para", "indent": 4, "text": ["Turn this checkbox on to use a VEXpression to override parameters based on arbitrary attribute values."], "extent": [12614, 12722]}], "container": true, "attrs": {"id": "usenoiseexpression"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Animation "], "extent": [13464, 13482], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Animate Noise"], "extent": [13511, 13530], "body": [{"type": "para", "indent": 8, "text": ["Vary the generated noise with time. Some noise types do not support this feature."], "extent": [13553, 13648]}, {"type": "para", "indent": 8, "text": ["Applying animation this way on geometries with millions of element count is slower to compute than using expressions such as ", {"type": "code", "text": ["$T * 0.25"]}, " in the ", {"type": "ui", "text": ["Offset"]}, " parameter to ", {"type": "q", "text": ["pan"]}, " across the noise field. "], "extent": [13648, 13864]}], "container": true, "attrs": {"id": "animated"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Pulse Duration"], "extent": [13864, 13884], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Animated Noise"]}, " is on, this controls the rate of change of the noise pattern."], "extent": [13912, 14008]}], "container": true, "attrs": {"id": "pulseduration"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "linkanimation"}}, {"level": 3, "type": "sep", "indent": 0, "text": [" Fractal "], "extent": [14008, 14024], "body": [{"type": "para", "indent": 4, "text": ["The fractal controls let you add additional fractal noise on top of the output of the basic noise type."], "extent": [14054, 14167]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Fractal Type"], "extent": [6741, 6755], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["None"], "extent": [6777, 6787], "body": [{"type": "para", "indent": 8, "text": ["Does not add any additional noise on top of the basic noise."], "extent": [6787, 6865]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_fractal_none.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/vop/unoise_fractal_none.jpg"}], "extent": [6865, 6928]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Standard"], "extent": [6928, 6942], "body": [{"type": "para", "indent": 8, "text": ["Adds pseudo-random noise on top of the basic output."], "extent": [6942, 7012]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_fractal_standard.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/vop/unoise_fractal_standard.jpg"}], "extent": [7012, 7079]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Terrain"], "extent": [7079, 7092], "body": [{"type": "para", "indent": 8, "text": ["Adds noise like ", {"type": "q", "text": ["Standard"]}, " but dampens the noise in the valleys, which can be useful for generating mountainous terrain."], "extent": [7092, 7230]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/vop/unoise_fractal_terrain.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/vop/unoise_fractal_terrain.jpg"}], "extent": [7230, 7296]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Hybrid"], "extent": [7296, 7308], "body": [{"type": "para", "indent": 8, "text": ["Like terrain, but with more sharpness in the valleys."], "extent": [7308, 7371]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "fractal"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["The following parameters are available when Fractal type is anything except ", {"type": "ui", "text": ["None"]}, ".        "], "extent": [14218, 14325]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Max octaves"], "extent": [7448, 7461], "body": [{"type": "para", "indent": 4, "text": ["The number of iterations of distortion to add to the output of the basic noise. The more iterations you add, the more ", {"type": "q", "text": ["detailed"]}, " the output. Note that the output may have fewer octaves than this parameter (that is, increasing the parameter will eventually stop adding detail), because the node eventually stops when there\u2019s no more room to add more detail in the output."], "extent": [7479, 7855]}], "container": true, "attrs": {"id": "oct"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Lacunarity"], "extent": [7855, 7867], "body": [{"type": "para", "indent": 4, "text": ["The frequency increment between iterations of fractal noise added to the basic output. Note that you can use a negative value."], "extent": [7885, 8021]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 4, "role": "item", "extent": [8021, 8037], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_lacunarity.mp4"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "lac"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Roughness"], "extent": [8086, 8097], "body": [{"type": "para", "indent": 4, "text": ["The scale increment between iterations of fractal noise added to the basic output. The higher the value the larger the ", {"type": "q", "text": ["jaggies"]}, " added to the output. You can use a negative value for roughness."], "extent": [8117, 8320]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 4, "role": "item", "extent": [8320, 8336], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_roughness.mp4"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "rough"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "linkfractal"}}, {"level": 3, "type": "sep", "indent": 0, "text": [" Warping "], "extent": [14465, 14481], "body": [{"type": "para", "indent": 4, "text": [{"type": "ui", "text": ["Lattice Warp"]}, " and ", {"type": "ui", "text": ["Gradient Warp"]}, " are two methods for adding ", {"type": "q", "text": ["fractal-ness"]}, " to the basic noises by warping the noise space."], "extent": [14503, 14641]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Lattice Warp"], "extent": [14641, 14659], "body": [{"type": "para", "indent": 8, "text": ["Adds ", {"type": "q", "text": ["stringiness"]}, " or ", {"type": "q", "text": ["wiriness"]}, " to standard noise."], "extent": [14682, 14747]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 8, "role": "item", "extent": [14747, 14763], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_lattice_warp.mp4"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "disp"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Lattice Warp Size"], "extent": [14822, 14845], "body": [{"type": "para", "indent": 8, "text": ["Controls base feature size of the generated noise. The value applies to each axis."], "extent": [14873, 14973]}], "container": true, "attrs": {"id": "dispesize"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Gradient Warp"], "extent": [14973, 14992], "body": [{"type": "para", "indent": 8, "text": ["Widens the peaks or valleys of the noise output."], "extent": [15016, 15078]}, {"type": "video_group", "body": [{"ext": null, "type": "video", "indent": 8, "role": "item", "extent": [15078, 15094], "body": [], "container": true, "attrs": {"src": "/videos/vop/unoise_gradient_warp.mp4"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "gflow"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Accumulate Lattice Warp"], "extent": [15154, 15183], "body": [{"type": "para", "indent": 8, "text": ["Accumulates the warp for each iteration (octave) of added fractal noise. This can add interesting smudgy effects when used in images, and interesting landmarks when used for terrain."], "extent": [15208, 15404]}], "container": true, "attrs": {"id": "accuml"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Accumulate Gradient Warp"], "extent": [15404, 15434], "body": [{"type": "para", "indent": 8, "text": ["Accumulates the warp for each iteration (octave) of added fractal noise."], "extent": [15459, 15545]}], "container": true, "attrs": {"id": "accumg"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Flow Rotation"], "extent": [9395, 9410], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Noise type"]}, " is ", {"type": "q", "text": ["Flow"]}, ", this controls the rotation of the ", {"type": "q", "text": ["swirl"]}, ", from ", {"type": "code", "text": ["0"]}, " to ", {"type": "code", "text": ["1"]}, ". Because this parameter is fractional, you can\u2019t just use ", {"type": "code", "text": ["$F"]}, " to animate it, since all integral values will look the same, representing a complete revolution. Instead, try something like ", {"type": "code", "text": ["$FF / 100"]}, "."], "extent": [9432, 9729]}], "container": true, "attrs": {"id": "flowrot"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "linkwarping"}}], "container": true, "attrs": {"id": "linknoise"}}, {"level": 2, "type": "sep", "indent": 0, "text": [" Post-Process "], "extent": [9777, 9796]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Enable Post-Process"], "extent": [9796, 9818], "body": [{"type": "para", "indent": 4, "text": ["Displays a set of controls to further fine tune the output value. All post-process modifications will take place after adjustment is applied to the volume primitive, unless set otherwise."], "extent": [9846, 10038]}], "container": true, "attrs": {"id": "enable_postprocess"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Scale"], "extent": [10038, 10045], "body": [{"type": "para", "indent": 4, "text": ["Scales the adjusted values in the primitive."], "extent": [10065, 10115]}], "container": true, "attrs": {"id": "scalevalue"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Add"], "extent": [10115, 10120], "body": [{"type": "para", "indent": 4, "text": ["Adds a constant value to the adjusted values in the primitive."], "extent": [10138, 10206]}], "container": true, "attrs": {"id": "addvalue"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Minimum"], "extent": [10206, 10215], "body": [{"type": "para", "indent": 4, "text": ["If this checkbox is turned on, output values are clamped to the specified ", {"type": "ui", "text": ["Minimum"]}, "."], "extent": [10238, 10330]}], "container": true, "attrs": {"id": "clampminvalue"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Maximum"], "extent": [10330, 10339], "body": [{"type": "para", "indent": 4, "text": ["If this checkbox is turned on, output values are clamped to the specified ", {"type": "ui", "text": ["Maximum"]}, "."], "extent": [10362, 10454]}], "container": true, "attrs": {"id": "clampmaxvalue"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Complement Volume"], "extent": [10454, 10473], "body": [{"type": "para", "indent": 4, "text": ["Computes and assigns the complement of final values in the volume."], "extent": [10498, 10570]}], "container": true, "attrs": {"id": "docomplementary"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [10570, 10579], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/volumenoisefog", "type": "link", "text": ["Volume Noise Fog"], "fullpath": "/nodes/sop/volumenoisefog"}], "extent": [10579, 10625]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/volumenoisesdf", "type": "link", "text": ["Volume Noise SDF"], "fullpath": "/nodes/sop/volumenoisesdf"}], "extent": [10625, 10670]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/volumenoisevector", "type": "link", "text": ["Volume Noise Vector"], "fullpath": "/nodes/sop/volumenoisevector"}], "extent": [10670, 10721]}], "container": true}], "text": "Related"}], "title": ["Volume Adjust Fog"], "summary": ["Modifies values on the incoming Volume and VDB primitives."], "included": ["/nodes/sop/attribnoise", "/nodes/vop/unifiednoise"]}