{"type": "root", "attrs": {"type": "node", "context": "sop", "namespace": "kinefx", "internal": "rop_fbxcharacteroutput", "icon": "SOP/kinefx-rop_fbxcharacteroutput", "tags": "character, export, rigging, animation", "since": "18.5", "version": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["ROP FBX Character Output"], "extent": [179, 208]}, {"type": "summary", "indent": 0, "text": ["Export a skinned character with geometry-based skeleton to an FBX file."], "extent": [208, 288]}, {"level": 1, "id": "attributes", "container": true, "type": "attributes_section", "indent": 0, "role": "section", "extent": [288, 300], "body": [{"type": "attributes_item_group", "body": [{"type": "attributes_item", "indent": 0, "text": ["boneCapture"], "extent": [300, 314], "body": [{"type": "para", "indent": 4, "text": ["Point attribute on the skin geometry that defines the skinning weights."], "extent": [314, 391]}], "container": true, "role": "item", "id": "bonecapture"}, {"type": "attributes_item", "indent": 0, "text": ["clipinfo"], "extent": [16, 26], "body": [{"type": "para", "indent": 4, "text": ["This detail attribute records the current animation range and sample rate\n    as well as the original animation range and sample rate of the imported\n    animation."], "extent": [45, 215]}], "container": true, "attrs": {"id": "clipinfo"}, "role": "item", "id": "clipinfo"}, {"type": "attributes_item", "indent": 0, "text": ["fbx_material_name"], "extent": [426, 445], "body": [{"type": "para", "indent": 4, "text": ["Primitive attribute on the skin geometry that holds the name of the\n    material in the FBX file."], "extent": [445, 548]}], "container": true, "role": "item", "id": "fbx_material_name"}, {"type": "attributes_item", "indent": 0, "text": ["material_override"], "extent": [548, 567], "body": [{"type": "para", "indent": 4, "text": ["Primitive attribute on the skin geometry that holds the material property\n    values."], "extent": [567, 658]}], "container": true, "role": "item", "id": "material_override"}, {"type": "attributes_item", "indent": 0, "text": ["name"], "extent": [658, 664], "body": [{"type": "para", "indent": 4, "text": ["Point attribute containing the unique name across all points used for\n    identification. This is only used if the ", {"type": "code", "text": ["path"]}, " point attribute is missing."], "extent": [664, 819]}], "container": true, "role": "item", "id": "name"}, {"type": "attributes_item", "indent": 0, "text": ["path"], "extent": [819, 825], "body": [{"type": "para", "indent": 4, "text": ["Point attribute containing the hierarchical path of FBX node that\n    corresponds to the point. It is created when FBX files are imported by the\n    ", {"scheme": "Node", "value": "/nodes/sop/kinefx--fbxanimimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fbxanimimport"}, " or ", {"scheme": "Node", "value": "/nodes/sop/kinefx--fbxcharacterimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fbxcharacterimport"}, "\n    nodes. This path is used to identify where to export the point transforms."], "extent": [825, 1132]}], "container": true, "role": "item", "id": "path"}, {"type": "attributes_item", "indent": 0, "text": ["scaleinheritance"], "extent": [215, 233], "body": [{"type": "para", "indent": 4, "text": ["This point attribute specifies the scaling behavior when performing local\n    transformations. For more details on what these values indicate see\n    ", {"scheme": "Vex", "value": "/vex/functions/combinelocaltransform", "type": "link", "text": "", "fallback_text": "combinelocaltransform()", "fullpath": "/vex/functions/combinelocaltransform"}, " and ", {"scheme": "Vex", "value": "/vex/functions/extractlocaltransform", "type": "link", "text": "", "fallback_text": "extractlocaltransform()", "fullpath": "/vex/functions/extractlocaltransform"}], "extent": [267, 482]}], "container": true, "attrs": {"id": "scaleinheritance_attrib"}, "role": "item", "id": "scaleinheritance"}, {"type": "attributes_item", "indent": 0, "text": ["shop_materialpath"], "extent": [1182, 1201], "body": [{"type": "para", "indent": 4, "text": ["This primitive attribute is used to specify the path to a shader node used\n    for rendering. Currently, only material parameters of those belonging to\n    the ", {"scheme": "Node", "value": "/nodes/shop/principledshader", "type": "link", "text": "", "fullpath": "/nodes/shop/principledshader"}, " shader are recognized for export."], "extent": [1201, 1429]}], "container": true, "role": "item", "id": "shop_materialpath"}, {"type": "attributes_item", "indent": 0, "text": ["transform"], "extent": [482, 493], "body": [{"type": "para", "indent": 4, "text": ["This 3\u00d73 matrix point attribute specifies the world transform for the\n    point. While the world position of the point is still ", {"type": "code", "text": ["P"]}, ", this transform\n    encodes the world transform\u2019s rotation, scale, and shear components."], "extent": [520, 746]}], "container": true, "attrs": {"id": "transform_attrib"}, "role": "item", "id": "transform"}], "container": true, "role": "item_group"}], "text": "Attributes"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1472, 1484], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Save to Disk"], "extent": [1484, 1499], "body": [{"type": "para", "indent": 4, "text": ["Exports the character with the current parameter settings."], "extent": [1517, 1581]}], "container": true, "attrs": {"id": "execute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Controls\u2026"], "extent": [1581, 1594], "body": [{"type": "para", "indent": 4, "text": ["Opens the ", {"scheme": null, "value": "/ref/windows/rendercontrol", "type": "link", "text": ["Render Control window"], "fullpath": "/ref/windows/rendercontrol"}, ". This window allows you to launch a one-off export with different frame range and dependency settings."], "extent": [1617, 1786]}], "container": true, "attrs": {"id": "renderdialog"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clip Range"], "extent": [1786, 1798], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Use clipinfo Detail Attribute"], "extent": [1822, 1857], "body": [{"type": "para", "indent": 8, "text": ["Obtain frame range to export using the input\u2019s ", {"type": "code", "text": ["clipinfo"]}, " detail\n        attribute."], "extent": [1857, 1950]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Render Current Frame"], "extent": [1950, 1976], "body": [{"type": "para", "indent": 8, "text": ["Export only the current frame."], "extent": [1976, 2016]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Render Frame Range"], "extent": [2016, 2040], "body": [{"type": "para", "indent": 8, "text": ["Only export the frames in the range set below, but also allow\n        exporting other frames if they are referenced by in-range frames."], "extent": [2040, 2185]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Render Frame Range Only (Strict)"], "extent": [2185, 2223], "body": [{"type": "para", "indent": 8, "text": ["Only export the frames in the range set below, and don\u2019t allow\n        exporting any other frames, even if they are referenced by in-range\n        frames."], "extent": [2223, 2387]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "cliprangemode"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Start/End/Inc"], "extent": [2599, 2618], "body": [{"type": "para", "indent": 8, "text": ["Specifies the range of frames to render (start frame, end frame, and\n        increment). All values may be floating point values. The range\n        is inclusive. "], "extent": [2634, 2806]}, {"type": "para", "indent": 8, "text": ["These parameters determine the values of the local variables for the\n        output driver."], "extent": [2806, 2906], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 12, "text": [{"type": "code", "text": ["$NRENDER"]}], "extent": [2906, 2930], "body": [{"type": "para", "indent": 16, "text": ["The number of frames to be rendered by the output driver."], "extent": [2930, 3004]}], "container": true}, {"type": "dt", "indent": 12, "text": [{"type": "code", "text": ["$N"]}], "extent": [3004, 3022], "body": [{"type": "para", "indent": 16, "text": ["The current frame being rendered (starting at 1 and going to\n                ", {"type": "code", "text": ["$NRENDER"]}, ")."], "extent": [3022, 3137]}], "container": true}], "container": true}], "container": true}, {"type": "para", "indent": 8, "text": ["For example, if the parameters are set to:"], "extent": [3137, 3197]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["Start "], "role": "th", "extent": [3197, 3214], "container": true}, {"type": "cell", "indent": 12, "text": ["End "], "role": "th", "extent": [3214, 3233], "container": true}, {"type": "cell", "indent": 16, "text": ["Inc "], "role": "th", "extent": [3233, 3256]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["10.5 "], "role": "td", "extent": [3256, 3271], "container": true}, {"type": "cell", "indent": 12, "text": ["12 "], "role": "td", "extent": [3271, 3288], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["0.5 |"], "extent": [3288, 3311]}]}], "divider": false}]}, {"type": "para", "indent": 8, "text": ["\u2026there will be 4 frames rendered (10.5, 11, 11.5, and 12), so ", {"type": "code", "text": ["$NRENDER"]}, " will have a value of 4. ", {"type": "code", "text": ["$N"]}, " will have the following values at each frame:"], "extent": [3311, 3478]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["Frame "], "role": "th", "extent": [3478, 3495], "container": true}, {"type": "cell", "indent": 12, "text": [{"type": "code", "text": ["$N"]}, " "], "role": "th", "extent": [3495, 3515]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["10.5 "], "role": "td", "extent": [3515, 3530], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["1"], "extent": [3530, 3544]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["11 "], "role": "td", "extent": [3544, 3557], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["2"], "extent": [3557, 3571]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["11.5 "], "role": "td", "extent": [3571, 3586], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["3"], "extent": [3586, 3600]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["12 "], "role": "td", "extent": [3600, 3613], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["4"], "extent": [3613, 3628]}]}], "divider": false}]}], "container": true, "attrs": {"id": "f"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Render with Take"], "extent": [304, 326], "body": [{"type": "para", "indent": 8, "text": ["Uses the settings in a particular take while rendering. Choose\n        ", {"type": "ui", "text": ["Current"]}, " to use the current take when rendering."], "extent": [345, 477]}], "container": true, "attrs": {"id": "take"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Input FBX File"], "extent": [2456, 2472], "body": [{"type": "para", "indent": 4, "text": ["When given, this FBX file is first imported. In effect, the output will be \n    a copy of this file updated with the input character."], "extent": [2496, 2635]}], "container": true, "attrs": {"id": "inputfilepath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output FBX File"], "extent": [2635, 2652], "body": [{"type": "para", "indent": 4, "text": ["File path to export to. This should be different from ", {"type": "ui", "text": ["Input FBX File"]}, "."], "extent": [2677, 2756]}], "container": true, "attrs": {"id": "outputfilepath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Skinning Method"], "extent": [2756, 2773], "body": [{"type": "para", "indent": 4, "text": ["The deformation method used for the export. This value should be chosen to\n    match with the ", {"scheme": "Node", "value": "/nodes/sop/kinefx--jointdeform", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--jointdeform"}, " used for visualizing the\n    deformation."], "extent": [2794, 2966]}], "container": true, "attrs": {"id": "skinmethod"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Blend Attribute"], "extent": [2966, 2983], "body": [{"type": "para", "indent": 4, "text": ["The attribute to use for blending between linear and dual quaternion\n    skinning methods. Only used when ", {"type": "ui", "text": ["Skinning Method"]}, " is set to\n    ", {"type": "code", "text": ["Blend Dual Quaternion and Linear"]}, "."], "extent": [3007, 3188]}], "container": true, "attrs": {"id": "dqblendattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clip Name"], "extent": [3188, 3199], "body": [{"type": "para", "indent": 4, "text": ["The clip name within the FBX file for storing the animation data.\n    Animation will be written to this clip, creating it in the process if\n    needed."], "extent": [3218, 3375]}, {"type": "para", "indent": 4, "text": ["When this is blank, the animation will be written to the active clip from\n    the input FBX file if it exists, else creating a clip named ", {"type": "code", "text": ["clip0"]}, " if\n    needed."], "extent": [3375, 3541]}], "container": true, "attrs": {"id": "clipname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Rest Pose Attribute"], "extent": [3541, 3562], "body": [{"type": "para", "indent": 4, "text": ["Name of a 4\u00d74 matrix point attribute to use as the rest pose for the\n    joints. The values in this attribute are defined in world space and is used\n    for the joint\u2019s transform before attaching animation."], "extent": [3587, 3799]}], "container": true, "attrs": {"id": "restposeattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Intermediate Directories"], "extent": [3799, 3832], "body": [{"type": "para", "indent": 4, "text": ["When enabled, create intermediate parent directories for output files as\n    needed."], "extent": [3849, 3939]}], "container": true, "attrs": {"id": "mkpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Shift Range to Source"], "extent": [3939, 3962], "body": [{"type": "para", "indent": 4, "text": ["When exporting, shift the animation so that it begins at the ", {"type": "code", "text": ["clipinfo"]}, "\n    attribute\u2019s source start time."], "extent": [3991, 4103]}], "container": true, "attrs": {"id": "shiftrangetosource"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Convert Units"], "extent": [4103, 4118], "body": [{"type": "para", "indent": 4, "text": ["When enabled, scale the animation so that it is converted to the FBX file\u2019s\n    measurement unit (default centimeters) from the Houdini scene\u2019s measurement\n    unit as specified in Main Preferences > Hip File Options (default meters)."], "extent": [4141, 4381]}], "container": true, "attrs": {"id": "convertunits"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Save as Binary"], "extent": [4381, 4397], "body": [{"type": "para", "indent": 4, "text": ["Save FBX file as binary instead of as text."], "extent": [4419, 4468]}], "container": true, "attrs": {"id": "saveasbinary"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Embed Media"], "extent": [4468, 4481], "body": [{"type": "para", "indent": 4, "text": ["Embed material textures with the exported FBX file."], "extent": [4501, 4558]}], "container": true, "attrs": {"id": "embedmedia"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pre-Render Script"], "extent": [4558, 4577], "body": [{"type": "para", "indent": 4, "text": ["Run this script before saving starts."], "extent": [4602, 4645]}], "container": true, "attrs": {"id": "prerenderscript"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pre-Frame Script"], "extent": [4645, 4663], "body": [{"type": "para", "indent": 4, "text": ["Run this script before each frame."], "extent": [4687, 4727]}], "container": true, "attrs": {"id": "preframescript"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Post-Frame Script"], "extent": [4727, 4746], "body": [{"type": "para", "indent": 4, "text": ["Run this script after each frame."], "extent": [4771, 4810]}], "container": true, "attrs": {"id": "postframescript"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Post-Render Script"], "extent": [4810, 4830], "body": [{"type": "para", "indent": 4, "text": ["Run this script after done saving."], "extent": [4856, 4896]}], "container": true, "attrs": {"id": "postrenderscript"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [4896, 4904], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Rest Geometry"], "extent": [4904, 4920], "body": [{"type": "para", "indent": 4, "text": ["The character\u2019s rest geometry. It must have at least a ", {"type": "code", "text": ["name"]}, " or ", {"type": "code", "text": ["path"]}, "\n    primitive attribute for the shape name to save to the primitives."], "extent": [4920, 5071]}, {"type": "para", "indent": 4, "text": ["A ", {"type": "code", "text": ["boneCapture"]}, " point attribute for is also required for skin deformation."], "extent": [5071, 5151]}, {"type": "para", "indent": 4, "text": ["Packed geometry primitives with single skin deformation weights will be\n    translated as rigid shapes on export."], "extent": [5151, 5270]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Capture Pose"], "extent": [5270, 5284], "body": [{"type": "para", "indent": 4, "text": ["The character\u2019s capture pose for skin deformation."], "extent": [5284, 5340]}, {"type": "para", "indent": 4, "text": ["Each joint in the skeleton is represented by a point, where the ", {"type": "code", "text": ["P"]}, " and ", {"type": "code", "text": ["transform"]}, " (", {"type": "code", "text": ["matrix3"]}, ") attributes contain the joint\u2019s transform.\n    The point\u2019s ", {"type": "code", "text": ["name"]}, " attribute contains the joint\u2019s name, and is matched up with the capture paths in the rest geometry\u2019s ", {"type": "code", "text": ["boneCapture"]}, " attribute when deforming the skin.\n    The skeleton\u2019s hierarchy is represented by two-point polygons between the points for each child joint and its parent."], "extent": [5340, 5778]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Animated Pose"], "extent": [5778, 5793], "body": [{"type": "para", "indent": 4, "text": ["The character\u2019s animated pose, which is represented in the same manner as the ", {"type": "ui", "text": ["Capture Pose"]}, "."], "extent": [5793, 5895]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [5895, 5904], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--rop_fbxanimoutput", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--rop_fbxanimoutput"}], "extent": [5904, 5943]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--fbxcharacterimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fbxcharacterimport"}], "extent": [5943, 5983]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--fbxskinimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fbxskinimport"}], "extent": [5983, 6018]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--fbxanimimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fbxanimimport"}], "extent": [6018, 6053]}], "container": true}], "text": "Related"}], "title": ["ROP FBX Character Output"], "summary": ["Export a skinned character with geometry-based skeleton to an FBX file."], "included": ["/nodes/out/standard", "/nodes/sop/_kinefx_common"]}