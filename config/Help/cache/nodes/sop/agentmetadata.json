{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "agentmetadata", "icon": "SOP/agentmetadata", "since": "19.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Agent Metadata"], "extent": [90, 109]}, {"type": "summary", "indent": 0, "text": ["Adds custom data to an agent definition."], "extent": [109, 158]}, {"type": "para", "indent": 0, "text": ["The ", {"scheme": null, "value": "/crowds/agents#metadata", "type": "link", "text": ["agent definition\u2019s metadata"], "fullpath": "/crowds/agents#metadata", "fragment": "#metadata"}, " can be used to store additional custom data in the agent definition, which is shared between instances of agent primitives.\nThis can be a more efficient alternative to creating attributes that have the same value for each agent instance."], "extent": [158, 455]}, {"type": "para", "indent": 0, "text": ["The metadata is stored as a ", {"type": "em", "text": ["dictionary"]}, ", which has the same behavior as ", {"scheme": null, "value": "/model/attributes#dict", "type": "link", "text": ["dictionary attributes"], "fullpath": "/model/attributes#dict", "fragment": "#dict"}, " and ", {"scheme": null, "value": "/vex/dicts", "type": "link", "text": ["VEX dictionaries"], "fullpath": "/vex/dicts"}, ".\nThe dictionary\u2019s keys are always strings, and the values can be strings, numbers, arrays, or a (nested) dictionary."], "extent": [455, 727]}, {"type": "para", "indent": 0, "text": ["The metadata dictionary can be inspected with the ", {"type": "code", "text": ["agentmetadata"]}, " primitive intrinsic, and queried with the ", {"scheme": "Vex", "value": "/vex/functions/agentmetadata", "type": "link", "text": ["agentmetadata"], "fallback_text": "agentmetadata()", "fullpath": "/vex/functions/agentmetadata"}, " VEX function or ", {"scheme": "Hom", "value": "/hom/hou/AgentMetadata", "type": "link", "text": "", "fallback_text": "hou.AgentMetadata", "fullpath": "/hom/hou/AgentMetadata"}, "."], "extent": [727, 911]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [911, 923], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [923, 931], "body": [{"type": "para", "indent": 4, "text": ["The agents to modify."], "extent": [946, 973]}], "container": true, "attrs": {"id": "group"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "type": "sep", "indent": 0, "text": [" Pre-Process "], "extent": [973, 991]}, {"type": "para", "indent": 0, "text": ["Removes or renames existing keys in the metadata dictionary."], "extent": [991, 1054]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Remove Keys"], "extent": [706, 719], "body": [{"type": "para", "indent": 4, "text": ["Removes any keys from the dictionary which match this pattern."], "extent": [740, 808]}], "container": true, "attrs": {"id": "removekeys"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Rename Keys"], "extent": [808, 821], "body": [{"type": "para", "indent": 4, "text": ["Renames keys in the dictionary using one or more search/replace patterns.\n    The standard pattern renaming syntax from the ", {"scheme": "Vex", "value": "/vex/functions/replace_match", "type": "link", "text": "", "fallback_text": "replace_match()", "fullpath": "/vex/functions/replace_match"}, " function is used.\n    For example, if ", {"type": "ui", "text": ["From"]}, " is ", {"type": "code", "text": ["*_to_*"]}, " and ", {"type": "ui", "text": ["To"]}, " is ", {"type": "code", "text": ["*-*"]}, ", a key named ", {"type": "code", "text": ["ab_to_cd"]}, " will become ", {"type": "code", "text": ["ab-cd"]}, "."], "extent": [849, 1122]}], "container": true, "attrs": {"id": "numrenamepatterns"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["From"], "extent": [1122, 1128], "body": [{"type": "para", "indent": 4, "text": ["The string pattern to rename."], "extent": [1149, 1184]}], "container": true, "attrs": {"id": "renamefrom"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["To"], "extent": [1184, 1188], "body": [{"type": "para", "indent": 4, "text": ["The replacement pattern for the string."], "extent": [1207, 1252]}], "container": true, "attrs": {"id": "renameto"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "type": "sep", "indent": 0, "text": [" Import Attribute Values "], "extent": [1215, 1245]}, {"type": "para", "indent": 0, "text": ["Creates key/value pairs from other attributes on the geometry."], "extent": [1245, 1310]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Merge Dictionaries"], "extent": [1310, 1330], "body": [{"type": "para", "indent": 4, "text": ["Inserts all of the key/value pairs from any dictionary attribute which matches this pattern.\n    For a point or primitive attribute, the attribute value is evaluated using the first agent primitive in the ", {"type": "ui", "text": ["Group"]}, " for each unique agent definition."], "extent": [1350, 1604]}], "container": true, "attrs": {"id": "mergedicts"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delete Merged Attributes"], "extent": [1512, 1538], "body": [{"type": "para", "indent": 4, "text": ["If enabled, deletes the attributes matched by the ", {"type": "ui", "text": ["Merge Dictionaries"]}, " pattern after importing their values into the dictionary."], "extent": [1565, 1701]}], "container": true, "attrs": {"id": "deletemergeddicts"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Attributes"], "extent": [1650, 1669], "body": [{"type": "para", "indent": 4, "text": ["Creates a key/value pair from the name and value of each attribute which matches this pattern.\n    Any dictionary attributes matched by the ", {"type": "ui", "text": ["Merge Dictionaries"]}, " pattern are skipped.\n    For a point or primitive attribute, the attribute value is evaluated using the first agent primitive in the ", {"type": "ui", "text": ["Group"]}, " for each unique agent definition.\n    This can be useful for procedurally creating metadata, or to create metadata items with complex value types (e.g. arrays or dictionaries) that are easier to construct with nodes such as ", {"scheme": "Node", "value": "/nodes/sop/attribwrangle", "type": "link", "text": "", "fullpath": "/nodes/sop/attribwrangle"}, "."], "extent": [1692, 2253]}], "container": true, "attrs": {"id": "importattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delete Imported Attributes"], "extent": [1959, 1987], "body": [{"type": "para", "indent": 4, "text": ["If enabled, deletes the attributes matched by the ", {"type": "ui", "text": ["Import Attributes"]}, " pattern after importing their values into the dictionary."], "extent": [2018, 2153]}], "container": true, "attrs": {"id": "deleteimportedattribs"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "type": "sep", "indent": 0, "text": [" Set Values "], "extent": [2303, 2320]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Number of Entries"], "extent": [2320, 2340], "body": [{"type": "para", "indent": 4, "text": ["Specifies the number of key/value pairs to add or edit in the metadata dictionary.\n    This option can be useful for adding metadata items with simple data types, such as strings or integers."], "extent": [2363, 2560]}], "container": true, "attrs": {"id": "metadataitems"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Enable"], "extent": [2254, 2262], "body": [{"type": "para", "indent": 4, "text": ["Toggles whether the key/value pair is created."], "extent": [2278, 2330]}], "container": true, "attrs": {"id": "enable"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Key"], "extent": [2330, 2335], "body": [{"type": "para", "indent": 4, "text": ["The string key to insert or modify the value for."], "extent": [2348, 2403]}], "container": true, "attrs": {"id": "key"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Type"], "extent": [2403, 2409], "body": [{"type": "para", "indent": 4, "text": ["The data type of the dictionary value.\n    To create values with complex data types (such as matrices, arrays, or dictionaries), the ", {"type": "ui", "text": ["Import Attributes"]}, " option can be used."], "extent": [2423, 2603]}], "container": true, "attrs": {"id": "type"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Value"], "extent": [2603, 2610], "body": [{"type": "para", "indent": 4, "text": ["The value to insert into the dictionary for the ", {"type": "ui", "text": ["Key"]}, "."], "extent": [2625, 2687]}], "container": true, "attrs": {"id": "value"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [2694, 2702], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Agents"], "extent": [2702, 2711], "body": [{"type": "para", "indent": 4, "text": ["Agent primitive(s) to modify."], "extent": [2711, 2746]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [2746, 2755], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Agents"], "extent": [2755, 2764], "body": [{"type": "para", "indent": 4, "text": ["The modified agent primitives."], "extent": [2764, 2800]}], "container": true}], "container": true}], "text": "Outputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [2800, 2809], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/out/agent", "type": "link", "text": "", "fullpath": "/nodes/out/agent"}], "extent": [2809, 2829]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/agent", "type": "link", "text": "", "fullpath": "/nodes/sop/agent"}], "extent": [2829, 2848]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/agentdefinitioncache", "type": "link", "text": "", "fullpath": "/nodes/sop/agentdefinitioncache"}], "extent": [2848, 2882]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/attribadjustdict", "type": "link", "text": "", "fullpath": "/nodes/sop/attribadjustdict"}], "extent": [2882, 2912]}], "container": true}], "text": "Related"}], "title": ["Agent Metadata"], "summary": ["Adds custom data to an agent definition."], "included": ["/nodes/sop/attribadjustdict", "/nodes/sop/attribadjustfloat", "/nodes/sop/attribnoise", "/nodes/vop/unifiednoise"]}