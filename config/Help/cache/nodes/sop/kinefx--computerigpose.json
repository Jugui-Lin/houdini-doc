{"type": "root", "attrs": {"type": "node", "context": "sop", "namespace": "kinefx", "internal": "computerigpose", "icon": "SOP/kinefx-computerigpose", "tags": "soprigging, rigging, motion, retargeting", "since": "18.5", "verb_since": "18.5", "version": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Compute Rig Pose"], "extent": [189, 210]}, {"type": "summary", "indent": 0, "text": ["Evaluates a multiparm of transform parameters and applies them to the input skeleton."], "extent": [210, 304]}, {"type": "para", "indent": 0, "text": ["This node is a low-level utility node for applying the transformations described by a multiparm matching the format of the ", {"type": "ui", "text": ["Transformations"]}, " parameter found on the ", {"scheme": "Node", "value": "/nodes/sop/kinefx--rigpose", "type": "link", "text": ["Rig Pose SOP"], "fullpath": "/nodes/sop/kinefx--rigpose"}, "."], "extent": [304, 512]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Transformations"], "extent": [1182, 1199], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Group"], "extent": [1225, 1236], "body": [{"type": "para", "indent": 8, "text": ["The point group to which this multiparm instance will be applied."], "extent": [1255, 1330]}], "container": true, "attrs": {"id": "group"}}, {"type": "dt", "indent": 4, "text": ["Mode"], "extent": [1330, 1340], "body": [{"type": "para", "indent": 8, "text": ["This parameter specifies how the transformation described by this multiparm instance should be applied to the input."], "extent": [1358, 1484]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Pre-Multiply"], "extent": [1484, 1506], "body": [{"type": "para", "indent": 12, "text": ["The transformation will be applied 'on top' of the input pose, this is analogous to treating any input local transformations as an Object node\u2019s ", {"type": "ui", "text": ["pre-transform"]}, "."], "extent": [1535, 1712]}], "container": true, "attrs": {"id": "premultiply"}}, {"type": "dt", "indent": 8, "text": ["Post-Multiply"], "extent": [1712, 1735], "body": [{"type": "para", "indent": 12, "text": ["The transformation will be applied in between the input point\u2019s parent transform and its local transform. This is analogous to modifying the ", {"type": "ui", "text": ["pre-transform"]}, " of a Object node. This mode is especially useful when we wish to reproportion an animated input using simple translations without compromising any input motion, effectively moving the pivot for the point\u2019s animation."], "extent": [1765, 2154]}], "container": true, "attrs": {"id": "postmultiply"}}, {"type": "dt", "indent": 8, "text": ["Override"], "extent": [2154, 2172], "body": [{"type": "para", "indent": 12, "text": ["The transformation described in this multiparm instance will completely overwrite any input local transforms on the points. This is useful when we wish to 'zero out' any input animation, or when working with the ", {"type": "ui", "text": ["Bake"]}, " options on the Rig Pose node."], "extent": [2198, 2462]}], "container": true, "attrs": {"id": "override"}}, {"type": "dt", "indent": 8, "text": ["From Rest Pose"], "extent": [2462, 2486], "body": [{"type": "para", "indent": 12, "text": ["The transformation will behave just as in the ", {"type": "ui", "text": ["Pre-Multiply"]}, " mode, but any input animation will be replaced be the pose specified in the ", {"type": "ui", "text": ["Rest Pose"]}, " parameter. This is useful when you wish to revert a points transform to a 'rest pose' rather than simply zeroing the local transform as in ", {"type": "ui", "text": ["Override"]}, "."], "extent": [2516, 2835]}], "container": true, "attrs": {"id": "fromrestpose"}}], "container": true}], "container": true, "attrs": {"id": "mode"}}, {"type": "dt", "indent": 4, "text": ["Transform Order"], "extent": [2835, 2856], "body": [{"type": "para", "indent": 8, "text": ["The left menu chooses the order in which transforms are applied\n        (for example, scale, then rotate, then translate). This can change the\n        position and orientation of the object, in the same way that going a\n        block and turning east takes you to a different place than turning east\n        and then going a block."], "extent": [2879, 3220]}, {"type": "para", "indent": 8, "text": ["The right menu chooses the order in which to rotate around the\n        X, Y, and Z axes. Certain orders can make character joint\n        transforms easier to use, depending on the character."], "extent": [3220, 3420]}], "container": true, "attrs": {"id": "transform"}}, {"type": "dt", "indent": 4, "text": ["Translate"], "extent": [3420, 3435], "body": [{"type": "para", "indent": 8, "text": ["Translation along XYZ axes."], "extent": [3458, 3495]}], "container": true, "attrs": {"id": "translate"}}, {"type": "dt", "indent": 4, "text": ["Rotate"], "extent": [3495, 3507], "body": [{"type": "para", "indent": 8, "text": ["Degrees rotation about XYZ axes."], "extent": [3527, 3569]}], "container": true, "attrs": {"id": "rotate"}}, {"type": "dt", "indent": 4, "text": ["Scale"], "extent": [3569, 3580], "body": [{"type": "para", "indent": 8, "text": ["Non-uniform scaling about XYZ axes."], "extent": [3599, 3644]}], "container": true, "attrs": {"id": "scale"}}, {"type": "dt", "indent": 4, "text": ["Pivot"], "extent": [3644, 3655], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Pivot Translate"], "extent": [3674, 3699], "body": [{"type": "para", "indent": 12, "text": ["The pivot translation along XYZ axes."], "extent": [3699, 3750]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Pivot Rotate"], "extent": [3750, 3772], "body": [{"type": "para", "indent": 12, "text": ["The pivot rotation about XYZ axes."], "extent": [3772, 3820]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pivot"}}], "container": true}], "container": true, "attrs": {"id": "transformations"}}], "container": true}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [565, 577], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Promote Parameters"], "extent": [577, 598], "body": [{"type": "para", "indent": 4, "text": ["When the node is contained within an hda, this callback will create the correct multiparm entry on the parent HDA\u2019s parameter interface using the values given in the ", {"type": "ui", "text": ["Operator Path"]}, " and ", {"type": "ui", "text": ["Parameter Name"]}, " parameters."], "extent": [620, 844]}], "container": true, "attrs": {"id": "promoteparms"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Operator Path"], "extent": [844, 859], "body": [{"type": "para", "indent": 4, "text": ["The path to the node on on which to look for the parameter speicified in ", {"type": "ui", "text": ["Parameter Name"]}, "."], "extent": [881, 979]}], "container": true, "attrs": {"id": "operatorpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Parameter Name"], "extent": [979, 995], "body": [{"type": "para", "indent": 4, "text": ["The name of the multiparm that contains the transformations."], "extent": [1013, 1079]}], "container": true, "attrs": {"id": "parmname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Rest Pose Attribute"], "extent": [1079, 1100], "body": [{"type": "para", "indent": 4, "text": ["This is the name of the attribute used when the ", {"type": "ui", "text": ["Mode"]}, " of a given multiparm instance is set to ", {"type": "ui", "text": ["From Rest Pose"]}, "."], "extent": [1122, 1244]}], "container": true, "attrs": {"id": "restposeattr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["World Space"], "extent": [1244, 1257], "body": [{"type": "para", "indent": 8, "text": ["When active the transformations will be applied to each point outside of any parent-child relationships they may have, so the children of a transformed point will not have their own transforms updated. This behaviour is analogous to the 'Child Compensation' behaviour found on Object nodes."], "extent": [1281, 1581]}], "container": true, "attrs": {"id": "worldspace"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Parameter Attributes "], "extent": [1581, 1610], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Output Parameters as Attributes"], "extent": [1610, 1648], "body": [{"type": "para", "indent": 8, "text": ["When active the node will write the parameter values fetched to the point attributes of the affected point."], "extent": [1673, 1790]}], "container": true, "attrs": {"id": "outputparms"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Internal Attributes "], "extent": [1790, 1818], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Output Internal Data as Attributes"], "extent": [1818, 1859], "body": [{"type": "para", "indent": 8, "text": ["When active the node will write out the transforms computed internally, useful if you want to consume this data downstream for more advanced setups without having to recompute it."], "extent": [1891, 2080]}], "container": true, "attrs": {"id": "outputinternaldata"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [2080, 2088], "body": [{"type": "para", "indent": 0, "text": ["A SOP skeleton."], "extent": [2088, 2106]}], "text": "Inputs"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [2106, 2115], "body": [{"type": "para", "indent": 0, "text": ["The input skeleton with the pose applied."], "extent": [2115, 2159]}], "text": "Outputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [2159, 2168], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--computetransform", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--computetransform"}], "extent": [2168, 2206]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--rigmatchpose", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--rigmatchpose"}], "extent": [2206, 2240]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--rigpose", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--rigpose"}], "extent": [2240, 2269]}], "container": true}], "text": "Related"}], "title": ["Compute Rig Pose"], "summary": ["Evaluates a multiparm of transform parameters and applies them to the input skeleton."], "included": ["/nodes/sop/_kinefx_common"]}